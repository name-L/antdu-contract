/*!
 * Copyright (c) 2010-2017 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2017 湖南蚁坊软件股份有限公司。保留所有权利。
 */

"use strict";

/**
 * Coordinator 的相关封装
 * Created by wuyaoqian on 2017/2/14.
 */

const BackOff = require('backo2');
const Coordinator = require('coordinator-node-client');
const path = require("path");
const logger = require("log4js-config").get("eefung.coordinator-wrapper." + path.basename(__filename));

const FetchingProgress = Symbol("FetchingProgress");
const FetchingPromise = Symbol("FetchingPromise");
const FetchingBackOff = Symbol("FetchingBackOff");

class CoordinatorClient {

    /**
     * 初始化
     * @param {object} config
     * @param {string} config.host
     * @param {string} config.port
     * @param {string} config.domain
     * @param {object} [config.backOff=null]
     * @param {number} [config.backOff.min=1000]
     * @param {number} [config.backOff.max=1000*60]
     * @param {number} [config.backOff.factor=1.5]
     * @param {number} [config.backOff.jitter=0]
     * @param {number} [config.backOff.maxAttempts=10]
     */
    constructor (config) {
        this.rawConfig = Object.assign({
            coordinator: {
                host: config.host,
                port: config.port,
                domain: config.domain
            },
            token: ".^_^."
        }, config);
        this.backOff = Object.assign({
            min: 1000,
            max: 1000 * 60,
            factor: 1.5,
            jitter: 0,
            maxAttempts: 10
        }, config.backOff);
        delete config.backOff;

        this[FetchingPromise] = {};
        this[FetchingBackOff] = {};

        this.isReady = false;
        this.client = new Coordinator(this.rawConfig);
        this.client.start(() => {
            this.isReady = true;
        });
    }

    /**
     * 内部方法：周期性的获取地址，直到成功
     * @param aid {string}
     * @param resolve {function}
     * @param reject {function}
     * @private
     */
    [FetchingProgress] (aid, resolve, reject) {
        const self = this;
        if (self.isReady) {
            let url = self.client.getServerByAppId(aid);
            if (url) {
                delete self[FetchingPromise][aid];
                return resolve(url);
            }
        }
        if (!self[FetchingBackOff][aid]) {
            self[FetchingBackOff][aid] = new BackOff({
                min: self.backOff.min,
                max: self.backOff.max,
                factor: self.backOff.factor,
                jitter: self.backOff.jitter
            });
        }
        if (self[FetchingBackOff][aid].attempts >= self.backOff.maxAttempts) {
            delete self[FetchingPromise][aid];
            logger.warn('FetchingProgress: exceed the max retry times, aid: %s, max: %s', aid, self.backOff.maxAttempts);
            self[FetchingBackOff][aid].reset();
            return reject();
        }
        setTimeout(() => {
            self[FetchingProgress](aid, resolve, reject);
        }, self[FetchingBackOff][aid].duration());
    }

    /**
     * 获取服务地址
     * @param aid {string}
     * @return {Promise} {
     *      resolve: function(url){}
     *      reject: function(){}
     * }
     */
    getServerByAppId (aid) {
        const self = this;
        if (!self[FetchingPromise][aid]) {
            self[FetchingPromise][aid] = new Promise((resolve, reject) => {
                process.nextTick(() => {
                    self[FetchingProgress](aid, resolve, reject);
                });
            });
        }
        return self[FetchingPromise][aid];
    }
}

module.exports = CoordinatorClient;