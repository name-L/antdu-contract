/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * REST 的相关数据管理, 如:
 * 1. 将用户的基本信息存到 session 中
 * 2. 将用户的token存到 session 中
 * 3. 将用户的基本信息存到 socket.request 中
 *
 * Created by wuyaoqian on 15/9/9.
 */

// const path = require("path");
// const logger = require("log4js-config").get("eefung.data-sdk-rest." + path.basename(__filename));
const AccessToken = require('../token/access-token.js');

const SESSION_USER_TOKEN_KEY = '_USER_TOKEN_';
const SESSION_USER_BASE_INFO_KEY = '_USER_BASE_INFO_';
const SOCKET_REST_INFO_KEY = '_BASE_REST_INFO_';

const Store = {
    session: {},
    socketRequest: {}
};

Store.session.userToken = {
    /**
     * 1. 在 session 的指定位置下 获取 用户Token信息
     * @param session
     * @returns {object} {AccessToken}
     */
    get: function (session) {
        return session && session[SESSION_USER_TOKEN_KEY];
    },
    /**
     * 2. 将 token 信息存在 session 下的指定位置
     * @param session
     * @param token
     * @returns {object} {AccessToken}
     */
    set: function (session, token) {
        if (session) {
            if (token) {
                // 主要用于在登录时传进来的 token，因为这时候的 token 还是业务返回的原始数据
                if (token.client_id || token.user_id) {
                    token = new AccessToken(token.access_token, token.expires_in, token.refresh_token);
                }
                session[SESSION_USER_TOKEN_KEY] = token;
            } else {
                session[SESSION_USER_TOKEN_KEY] = {};
            }
        }
        return session && session[SESSION_USER_TOKEN_KEY];
    },
    /**
     * 3. 清除 session 内的 token 信息
     * @param session
     */
    clear: function (session) {
        if (session) {
            delete session[SESSION_USER_TOKEN_KEY];
        }
    }
};

Store.session.userInfo = {
    /**
     * 1. 在 session 的指定位置下 获取 用户基本信息
     * @param session
     * @returns {object}
     */
    get: function (session) {
        return session && session[SESSION_USER_BASE_INFO_KEY];
    },
    /**
     * 2. 将 用户基本信息 存在 session 下的指定位置
     * @param session
     * @param userid {string|undefined}    为空时不做处理
     * @param username {string|undefined}  为空时不做处理
     * @returns {object}
     */
    set: function (session, userid, username) {
        if (session) {
            if (!session[SESSION_USER_BASE_INFO_KEY]) {
                session[SESSION_USER_BASE_INFO_KEY] = {};
            }
            if (userid) {
                session[SESSION_USER_BASE_INFO_KEY]['userid'] = userid;
            }
            if (username) {
                session[SESSION_USER_BASE_INFO_KEY]['username'] = username;
            }
        }
        return session && session[SESSION_USER_BASE_INFO_KEY];
    },
    /**
     * 3. 清除 session 内的 用户基本 信息
     * @param session
     */
    clear: function (session) {
        if (session) {
            delete session[SESSION_USER_BASE_INFO_KEY];
        }
    }
};

Store.socketRequest.restInfo = {
    /**
     * 1. 在 socketRequest 的指定位置下 获取 rest基本信息
     * @param socketRequest
     */
    get: function (socketRequest) {
        return socketRequest && socketRequest[SOCKET_REST_INFO_KEY];
    },
    /**
     * 2. 将 rest基本信息 存放在 socketRequest 下的指定位置
     * @param socketRequest
     * @param baseRestInfo {object} {
             *      sid:"",                        // session id
             *      session-store:null,            // session store
             *      userid:"",                     // userid
             *      username:"",                   // username
             *      multi:false,                   // multi login
             *      lang:""                        // user language
             *      ext:null                       // user extend info
             * }
     * @returns {object}
     */
    set: function (socketRequest, baseRestInfo) {
        if (socketRequest) {
            if (baseRestInfo) {
                socketRequest[SOCKET_REST_INFO_KEY] = {
                    'sid': baseRestInfo['sid'],
                    'userid': baseRestInfo['userid'],
                    'username': baseRestInfo['username'],
                    'multi': baseRestInfo['multi'],
                    'lang': baseRestInfo['lang'],
                    'ext': baseRestInfo['ext']
                };
                Object.defineProperty(socketRequest[SOCKET_REST_INFO_KEY], 'session-store', {
                    value: baseRestInfo['session-store']
                });
            } else {
                socketRequest[SOCKET_REST_INFO_KEY] = {};
            }
        }
        return socketRequest && socketRequest[SOCKET_REST_INFO_KEY];
    },
    /**
     * 3. 清除 socketRequest 内的 用户基本 信息
     * @param socketRequest
     */
    clear: function (socketRequest) {
        if (socketRequest) {
            delete socketRequest[SOCKET_REST_INFO_KEY];
        }
    }
};

/**
 * 属性:
 * 1. session: {
 *      userToken: {get(session), set(session, token, username), clear(session)},
 *      userInfo: {get(session), set(session, userid, username), clear(session)}
 * }
 * 2. socketRequest: {
 *      restInfo: {get(socketRequest), set(socketRequest, baseRestInfo), clear(socketRequest)}
 * }
 *
 * @type {Object}
 */
module.exports = Store;
