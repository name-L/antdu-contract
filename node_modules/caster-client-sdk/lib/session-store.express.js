/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

"use strict";

/**
 * 通过 hazelcast-client 处理 session 的相关信息
 * Created by wuyaoqian on 16/3/29.
 */

var util = require('util');
var path = require("path");
var logger = require("log4js-config").get("eefung.webapp.caster-store.session." + path.basename(__filename));
var CasterMapManage = require('./caster-map.js');

/**
 * Return the `HazelcastClientStore` extending `express`'s session Store.
 *
 * @param session {object} express session
 * @return {Function}
 */

module.exports = function (session) {

    /**
     * Express's session Store.
     */
    var Store = session.Store;
    var oldCreateSession = Store.prototype.createSession;

    /**
     * Initialize HazelcastRestStore with the given `options`.
     *
     * @param options {Object} {
     *      storeCustomInfo: {
     *          key, data:function(req){}
     *      },
     *      resaveTime: 1000 * 30,
     *      connectedCallback: function(){}
     * }
     * @param mapName {string}
     * @param defaultExpirationTime {int}
     */
    function HazelcastClientStore (options, mapName, defaultExpirationTime) {
        var self = this;
        options = options || {};
        Store.call(this, options);
        self.resaveTime = options.resaveTime || 1000 * 30;
        self.storeCustomInfo = options.storeCustomInfo;
        self.casterMapInstance = null;
        CasterMapManage.getInstance(mapName, defaultExpirationTime).then(function (instance) {
            self.casterMapInstance = instance;
            if (typeof options.connectedCallback === 'function') {
                options.connectedCallback.call(self);
            }
        });
    }

    /**
     * Inherit from `Store`.
     */
    util.inherits(HazelcastClientStore, Store);

    /**
     * Attempt to fetch session by the given `sid`.
     *
     * @param sid {String} session id
     * @param fn {Function} callback function
     * @param resave {boolean} resave data
     */
    HazelcastClientStore.prototype.get = function (sid, fn, resave) {
        var self = this, time;
        if (!self.casterMapInstance) {
            return fn("session store not ready!");
        }
        self.casterMapInstance.get(sid, function (err, sess) {
            if (err || !sess) {
                fn(err);
            } else {
                time = sess.expires - Date.now();
                if (time >= 0) {
                    if (resave || time <= self.resaveTime) {
                        logger.info('在获取 session(sid: %s) 数据时, 发现离过期时间还剩不到 %ss(t: %ss) , 触发自动延长机制.', sid, self.resaveTime / 1000, resave ? "resave" : time / 1000);
                        self.set(sid, sess.data);
                    }
                    if (sess.data) {
                        Object.defineProperty(sess.data, 'id', {value: sid});
                    }
                    fn(null, sess.data, time);
                } else {
                    logger.warn('在获取 session(sid: %s) 数据时, 发现已过期 %ss , 触发自动清除无效数据操作.', sid, time / 1000);
                    self.destroy(sid);
                    fn();
                }
            }
        });
    };

    /**
     * Commit the given `sess` object associated with the given `sid`.
     *
     * @param sid {String} session id
     * @param sess {object} sesssion object
     * @param fn {Function} callback function
     */
    HazelcastClientStore.prototype.set = function (sid, sess, fn) {
        var self = this, storeObj = {};
        if (!self.casterMapInstance) {
            return fn("session store not ready!");
        }
        storeObj.data = sess;
        storeObj.expires = Date.now() + self.casterMapInstance.defaultExpirationTime;
        if (
            sess.req &&
            sess.req.headers &&
            self.storeCustomInfo &&
            self.storeCustomInfo.key &&
            typeof self.storeCustomInfo.data === "function"
        ) {
            storeObj.data[self.storeCustomInfo.key] = self.storeCustomInfo.data(sess.req);
        }
        self.casterMapInstance.put(sid, storeObj, fn);
    };

    /**
     * Destroy the session associated with the given `sid`.
     *
     * @param sid {String} session id
     * @param fn {Function} callback function
     */
    HazelcastClientStore.prototype.destroy = function (sid, fn) {
        if (!this.casterMapInstance) {
            return fn("session store not ready!");
        }
        this.casterMapInstance.del(sid, fn);
    };

    /**
     * create session
     * @param req
     * @param sess
     */
    HazelcastClientStore.prototype.createSession = function (req, sess) {
        try {
            return oldCreateSession.call(this, req, sess);
        } catch (error) {
            logger.error('在创建 session 时, 出现异常，\nsess: %s, \ndetail: ', JSON.stringify(sess), (error && error.stack) ? error.stack : error);
            throw error;
        }
    };

    return HazelcastClientStore;
};
