/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const EventEmitter = require('events');
const {getInstance, constructorCheck} = require('../util/service-util.js');
const BaseService = require('../util/base-service.js');

/**
 * resource-service.js
 * Created by wuyaoqian on 2019/1/22.
 */

class ResourceService extends BaseService {

    /**
     * 资源服务构造方法
     * @param {string} name
     */
    constructor (name) {
        super();
        constructorCheck.call(this, new.target, ResourceService, name, () => {
            this.name = name;
            this.data = undefined;
            this.data_filter_fn = undefined;
            this.data_request_fn = undefined;
            this.emitter_publish = new EventEmitter();
        });
    }

    /**
     * 更新数据（同步更新，异步抛出）
     * @param {*} data
     * @return {ResourceService}
     */
    update (data) {
        // 排除无效数据
        if (!this.emitter_publish || data === undefined || data === null || data === this.data) {
            return this;
        }
        // 同步更新数据
        this.data = data;
        // 异步抛出数据
        setTimeout(() => {
            let instance = this;
            // 无过滤条件时，直接 emit 数据
            if (!instance.data_filter_fn) {
                return instance.emitter_publish.emit(instance.name, instance.data);
            }
            // 手动循环 listeners，并过滤数据，然后手动回调
            instance.emitter_publish.listeners(instance.name).forEach(function (handler) {
                handler(handler.condition ? instance.data_filter_fn(instance.data, handler.condition) : instance.data);
            });
        }, 0);
        return this;
    }

    /**
     * @callback UpdateRequest
     * @param {*} new-data
     * @param {*} old-data
     * @param {string} [from]
     * @return {*} - 同步返回更新后的数据
     */
    /**
     * 请求数据更新的回调方法注册
     * @param {UpdateRequest} fn
     * @return {function}
     */
    onUpdateRequest (fn) {
        if (!this.emitter_publish || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = this.data_request_fn = fn.bind(this);
        return () => {
            if (bind_fn === this.data_request_fn) { this.data_request_fn = null; }
        };
    }

    /**
     * @callback ConditionFilter
     * @param {*} instance-data
     * @param {*} condition
     * @return {*} - 同步返回过滤后的数据
     */
    /**
     * 根据条件过滤数据的回调方法注册
     * @param {ConditionFilter} fn
     * @return {function}
     */
    onConditionFilter (fn) {
        if (!this.emitter_publish || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = this.data_filter_fn = fn.bind(this);
        return () => {
            if (bind_fn === this.data_filter_fn) { this.data_filter_fn = null; }
        };
    }

    /**
     * 销毁当前的资源服务
     */
    destroy () {
        if (this.emitter_publish) {
            this.emitter_publish.removeAllListeners(this.name);
            delete this.data;
            delete this.data_filter_fn;
            delete this.data_request_fn;
            delete this.emitter_publish;
            delete this.constructor.services[this.name];
        }
    }

    /**
     * 发布一个资源服务
     * @param {string} name
     * @param {*} [data]
     * @param {function} [onUpdateRequestFn]
     * @param {function} [onConditionFilterFn]
     * @return {ResourceService}
     */
    static publish (name, data, onUpdateRequestFn, onConditionFilterFn) {
        let instance = getInstance(this, ResourceService, 'publish', [name]);
        instance.onUpdateRequest(onUpdateRequestFn);
        instance.onConditionFilter(onConditionFilterFn);
        instance.update(data);
        return instance;
    }

    /**
     * 监听资源服务的数据变更
     * @param {string} name - 资源名称
     * @param {function} fn - 获取到数据后的回调函数
     * @param {*} [condition=null] - 获取数据时的过滤条件
     * @param {boolean} [force=false] - 是否立即获取一次数据
     * @return {function}
     */
    static on (name, fn, condition = null, force = false) {
        if (!fn || typeof fn !== 'function') {
            return () => {};
        }
        let instance = getInstance(this, ResourceService, 'on', [name]);
        let bind_fn = fn.bind(null);
        // 当只有三个参数并且第三个参数是布尔型，则使用如下规则（兼容无条件监听时的是否立即执行的表达）
        if (arguments.length === 3 && typeof condition === 'boolean') {
            force = condition;
            condition = null;
        }
        bind_fn.condition = condition;
        if (force) {
            setTimeout(() => {
                bind_fn(
                    (condition && instance.data_filter_fn) ? instance.data_filter_fn(instance.data, condition) : instance.data
                );
            }, 0);
        }
        instance.emitter_publish.on(name, bind_fn);
        return () => {
            instance.emitter_publish.removeListener(name, bind_fn);
        };
    }

    /**
     * 获取当前资源服务的数据，并持续监听数据的变更（异步）
     * @deprecated
     * @param {string} name
     * @param {function} fn
     * @param {*} [condition]
     * @return {function}
     */
    static fetchAndListen (name, fn, condition) {
        console.warn(`Please use ${this.name}.on instead ${this.name}fetchAndListen, next version will remove`);
        return this.on(name, fn, condition, true);
    }

    /**
     * 获取当前资源服务的数据（同步）
     * @param {string} name
     * @param {*} [condition]
     * @return {*}
     */
    static get (name, condition) {
        let instance = getInstance(this, ResourceService, 'get', [name], true);
        if (instance) {
            return (instance.data_filter_fn && condition) ? instance.data_filter_fn(instance.data, condition) : instance.data;
        }
        return undefined;
    }

    /**
     * 获取当前资源服务的数据（异步）
     * @param {string} name
     * @param {function} fn
     * @param {*} [condition]
     * @return {ResourceService}
     */
    static fetch (name, fn, condition) {
        let instance = getInstance(this, ResourceService, 'fetch', [name], true);
        if (instance && fn && typeof fn === 'function') {
            setTimeout(() => {
                fn.call(null, (instance.data_filter_fn && condition) ? instance.data_filter_fn(instance.data, condition) : instance.data);
            }, 0);
        }
        return this;
    }

    /**
     * 清求更新资源服务的数据
     * @param {string} name
     * @param {*} newData
     * @param {*} [from]
     * @return {ResourceService}
     */
    static requestUpdate (name, newData, from) {
        let instance = getInstance(this, ResourceService, 'requestUpdate', [name], true);
        if (instance && instance.data_request_fn) {
            if (newData !== undefined && newData !== null && newData !== instance.data) {
                instance.update(instance.data_request_fn(newData, instance.data, from));
            }
        }
        return this;
    }

}

/**
 * 静态方法：
 * 0. getService             // function(name) { return SubResourceService; }
 * 1. publish                // function(name, data, onUpdateRequestFn, onConditionFilterFn) { return instance; }
 * 2. on                     // function(name, fn, condition, force) { return selfOffHandler; }
 * 3. get                    // function(name, condition) { return instance.data; }
 * 4. fetch                  // function(name, fn, condition) { return clazz; }
 * 5. requestUpdate          // function(name, data, from) { return clazz; }
 *
 * 实例方法：
 * 1. update                 // function(data) { return instance; }
 * 2. onUpdateRequest        // function(fn) { return selfOffHandler; }
 * 3. onConditionFilter      // function(fn) { return selfOffHandler; }
 * 4. destroy                // function() { return undefined; }
 *
 * @type {ResourceService}
 */
module.exports = ResourceService;