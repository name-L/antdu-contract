/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const EventEmitter = require('events');
const {getInstance, constructorCheck} = require('../util/service-util.js');
const BaseService = require('../util/base-service.js');

/**
 * listen-service.js
 * Created by wuyaoqian on 2019/1/22.
 */

class ListenService extends BaseService {

    constructor (name) {
        super();
        constructorCheck.call(this, new.target, ListenService, name, () => {
            this.name = name;
            this.emitter = new EventEmitter();
        });
    }

    /**
     * 监听回调
     * @param {function} fn
     * @return {function}
     */
    on (fn) {
        if (!this.emitter || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = fn.bind(this);
        this.emitter.on(this.name, bind_fn);
        return () => {
            this.emitter.removeListener(this.name, bind_fn);
        };
    }

    /**
     * 销毁监听服务
     */
    destroy () {
        if (this.emitter) {
            this.emitter.removeAllListeners(this.name);
            delete this.emitter;
            delete this.constructor.services[this.name];
        }
    }

    /**
     * 发布一个监听服务
     * @param {string} name
     * @return {ListenService}
     */
    static publish (name) {
        return getInstance(this, ListenService, 'publish', [name]);
    }

    /**
     * 往监听服务中发布一条消息
     * @param {string} name
     * @param {*} data
     * @return {ListenService}
     */
    static send (name, ...data) {
        let instance = getInstance(this, ListenService, 'send', [name], true);
        if (instance) {
            instance.emitter.emit(name, ...data);
        }
        return this;
    }
}

/**
 * 静态方法：
 * 0. getService             // function(name) { return SubListenService; }
 * 1. publish                // function(name) { return instance; }
 * 2. send                   // function(name, ...data) { return clazz; }
 *
 * 实例方法：
 * 1. on                     // function(fn) { return selfOffHandler; }
 * 2. destroy                // function() { return undefined; }
 *
 * @type {ListenService}
 */
module.exports = ListenService;
