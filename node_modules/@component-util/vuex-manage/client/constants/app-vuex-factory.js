import _ from 'lodash';
const TOP_APP_ID = 'TOP_APP_ID';

import {
    mapState,
    mapGetters,
    mapActions,
    mapMutations,
    createNamespacedHelpers
} from 'vuex';

const orgHandler = {
    mapState,
    mapGetters,
    mapActions,
    mapMutations
};

const getConfig = {
    getState: 'mapState',
    getGetter: 'mapGetters',
    getAction: 'mapActions',
    getMutation: 'mapMutations',
    getAppState: 'appMapState',
    getAppGetter: 'appMapGetters',
    getAppAction: 'appMapActions',
    getAppMutation: 'appMapMutations'
};

const getTopConfig = {
    getTopAppState: 'getState',
    getTopAppGetter: 'getGetter',
    getTopAppAction: 'getAction',
    getTopAppMutation: 'getMutation'
};

const getMethodByArgs = function (args) {
    let param = args.length === 1 ? args[0] : args[1];
    return _.isArray(param) ? param[0] : Object.keys(param)[0];
};

const create = function ({APP_ID, store}) {
    APP_ID = APP_ID || TOP_APP_ID;

    function appendAppNamespace (appId, namespace) {
        return [appId].concat(_.isArray(namespace) ? namespace : [namespace]).join('/');
    }

    function appendAppId (appId, args) {
        if (args.length === 1) {
            return [appId, args[0]];
        } else if (args.length === 2) {
            return [appendAppNamespace(appId, args[0]), args[1]];
        } else {
            return args;
        }
    }

    const result = {
        store,
        createNamespacedHelpers,
        appCreateNamespacedHelpers (namespace) {
            return createNamespacedHelpers(appendAppNamespace(APP_ID, namespace));
        },
        topAppCreateNamespacedHelpers (namespace) {
            return createNamespacedHelpers(appendAppNamespace(TOP_APP_ID, namespace));
        }
    };

    for (let name in orgHandler) {
        let methodHandler = result[name] = orgHandler[name];
        result[`app${name.substring(0, 1).toUpperCase()}${name.substring(1)}`] = function (...args) {
            return methodHandler.apply(null, appendAppId(APP_ID, args));
        };
    }

    for (let name in getConfig) {
        result[name] = function (...args) {
            if (args.length === 1 && _.isString(args[0])) {
                args[0] = [args[0]];
            } else if (args.length === 2 && _.isString(args[1])) {
                args[1] = [args[1]];
            }

            let handler = result[getConfig[name]].apply(null, args)[getMethodByArgs(args)].bind({$store: store});
            return ['getState', 'getAppState'].includes(name) ? handler() : handler;
        };
    }

    for (let name in getTopConfig) {
        result[name] = function (...args) {
            if (args.length === 1) {
                args = [TOP_APP_ID, args[0]];
            } else if (args.length === 2) {
                args[0] = appendAppNamespace(TOP_APP_ID, args[0]);
            }

            return result[getTopConfig[name]].apply(result, args);
        };
    }

    return result;
};

export default {create};
