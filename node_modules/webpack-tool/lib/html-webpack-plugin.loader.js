/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * html-webpack-plugin.loader.js
 * 支持两个参数：
 *
 * // 用来传递一些相关选项配置
 * templateOpt: {}
 * // 用来替换 {{title}} 这类格式的文本
 * templateData: {}
 *
 * Created by wuyaoqian on 2018/5/21.
 */

const fs = require('fs');
const path = require('path');
const loaderUtils = require('loader-utils');
const stringifyRequest = loaderUtils.stringifyRequest;

class Resource {
    /**
     * 资源构造方法
     * @param content {string} 文本内容
     * @param context {string} 当前文本内容所在的上下文路径；
     * @param rootResource {Resource} 顶层Resource对象（不传则是当前 resource 对象）
     */
    constructor (content, context, rootResource) {
        this.content = content;
        this.context = context;
        this.rootResource = rootResource || this;
        this.tplIncludeGutterStr = '\n';
        this.resolvedContent = null;
        // 只记录顶层 resource 对象的 staticAssets (因为最终所有的 assets 都会放在顶层中)
        this.staticAssets = rootResource ? rootResource.staticAssets : [];
        // 只记录顶层 resource 对象的 dynamicAssets (此内容需要在外面动态设定，然后在内部动态的添加到 staticAssets 中)
        this.dynamicAssets = rootResource ? rootResource.dynamicAssets : {};
    }

    /**
     * 获取解析后的内容
     * @return {string}
     */
    getResolvedContentContent () {
        // 如果已解析，则直接返回
        if (this.resolvedContent) { return this.resolvedContent; }

        let ret;
        let tempContent;
        let tempFile;
        let newContentForAutoAsset;
        let newContentForDynamicAsset;
        let newContentForStaticAsset;
        let newContentForStaticTpl;
        const dynamicAssetRegExp = /{{(['"]?)asset-include-dynamic ?: ?([^{}]+)\1}}/g;
        const staticAssetRegExp = /{{(['"]?)asset-include ?: ?([^{}]+)\1}}/g;
        const staticTplRegExp = /{{(['"]?)tpl-include ?: ?([^{}]+)\1}}/g;

        // 自动解析如下资源：
        // 1. src="..."
        // 2. srcset="... 2x"
        // 3. url("..."）
        const autoAssetRegExpSRC = /src ?= ?(['"])([^'" {}]+)\1/ig;
        const autoAssetRegExpSRCSET = /srcset ?= ?(['"])(([^'" {}]+)( +[\da-z]+)?)\1/ig;
        const autoAssetRegExpURL = /url\((['"])([^'" {}]+)\1\)/ig;
        newContentForAutoAsset = this.content;
        while ((ret = autoAssetRegExpSRC.exec(this.content))) {
            if (!ret[2].startsWith('.')) { continue; }
            newContentForAutoAsset = newContentForAutoAsset.replace(
                ret[0], `src=${ret[1]}{{asset-include:${path.relative(
                    this.context, path.join(this.rootResource.context, ret[2])
                )}}}${ret[1]}`
            );
        }
        while ((ret = autoAssetRegExpSRCSET.exec(this.content))) {
            if (!ret[3].startsWith('.')) { continue; }
            newContentForAutoAsset = newContentForAutoAsset.replace(
                ret[0], `srcset=${ret[1]}{{asset-include:${path.relative(
                    this.context, path.join(this.rootResource.context, ret[3])
                )}}}${ret[4]}${ret[1]}`
            );
        }
        while ((ret = autoAssetRegExpURL.exec(this.content))) {
            if (!ret[2].startsWith('.')) { continue; }
            newContentForAutoAsset = newContentForAutoAsset.replace(
                ret[0], `url(${ret[1]}{{asset-include:${path.relative(
                    this.context, path.join(this.rootResource.context, ret[2])
                )}}}${ret[1]})`
            );
        }

        // 解析 asset 资源 (动态资源)
        newContentForDynamicAsset = newContentForAutoAsset;
        while ((ret = dynamicAssetRegExp.exec(newContentForAutoAsset))) {
            newContentForDynamicAsset = newContentForDynamicAsset.replace(
                ret[0], `{{asset-include:${path.relative(this.context, path.join(
                    this.rootResource.context, this.rootResource.dynamicAssets[ret[2]] || '')
                )}}}`
            );
        }

        // 解析 asset 资源（静态资源）
        newContentForStaticAsset = newContentForDynamicAsset;
        while ((ret = staticAssetRegExp.exec(newContentForDynamicAsset))) {
            newContentForStaticAsset = newContentForStaticAsset.replace(
                ret[0], `{{_assets_[${this.rootResource.staticAssets.length}]}}`
            );
            this.rootResource.staticAssets.push(
                path.relative(this.rootResource.context, path.join(this.context, ret[2])).replace(/\\/g, '/')
            );
        }

        // 递归解析 tpl 资源
        newContentForStaticTpl = newContentForStaticAsset;
        while ((ret = staticTplRegExp.exec(newContentForStaticAsset))) {
            tempFile = path.join(this.context, ret[2]);
            tempContent = this.tplIncludeGutterStr + fs.readFileSync(tempFile, 'utf-8') + this.tplIncludeGutterStr;
            tempContent = (new Resource(tempContent, path.join(tempFile, '../'), this.rootResource))
                .getResolvedContentContent();
            newContentForStaticTpl = newContentForStaticTpl.replace(ret[0], tempContent);
        }

        // 记录，并返回
        return (this.resolvedContent = newContentForStaticTpl);
    }
}

module.exports = function (source) {
    // All templateVariables which should be available
    // @see HtmlWebpackPlugin.prototype.executeTemplate
    const templateVariables = [
        'compilation',
        'webpack',
        'webpackConfig',
        'htmlWebpackPlugin'
    ];
    const opt = loaderUtils.getOptions(this) || {};
    const rootResource = new Resource(source, this.context);
    // 给 rootResource.dynamicAssets 赋值
    rootResource.dynamicAssets = opt['dynamic-include-asset'] || {};
    // 解析 tpl-include, asset-include 后的内容
    const resolvedTplContent = JSON.stringify(rootResource.getResolvedContentContent());
    // htmlWebpackPlugin 传递过来的变量
    const variables = templateVariables.map(function (variableName) {
        return `var ${variableName} = templateParams.${variableName}`;
    }).join(';\n') + ';\n';
    // 解析 asset-include 后的资源数组变量
    const assets = 'var _assets_ = [' +
        rootResource.staticAssets.map(function (asset) {
            return `\n  require("${asset}")`;
        }).join(',') + '\n];';

    return `
    var patternReplace = require(${stringifyRequest(this, require.resolve('@component-util/pattern-replace'))});
    module.exports = function (templateParams) {
        ${variables}
        ${assets}
        var templateOpt = Object.assign(
            {reservePatternWhenDataEmpty: true}, 
            htmlWebpackPlugin.options.templateOpt
        );
        var templateData = htmlWebpackPlugin.options.templateData;
        var patternReplaceOpt = {
            reservePatternWhenDataEmpty: templateOpt.reservePatternWhenDataEmpty
        };
        var patternReplaceData = Object.assign({}, templateData, {_assets_: _assets_});
        return (function(data, opt){
            return patternReplace(${resolvedTplContent}, data, opt);
        })(patternReplaceData, patternReplaceOpt);
    }`;
};
