/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * 微博视频的相关服务
 * Created by wuyaoqian on 15/6/15.
 */

const path = require('path');
const log4js = require('log4js-config');
const RestUtil = require('./rest-util');
const EventEmitter = require('events');
const extend = require('deep-extend');
const logger = log4js.get('eefung.data-sdk-util.' + path.basename(__filename));
const RestHelp = RestUtil(logger);

const isHttp = /^http:\/\//i;

const NormalFetchUtil = {
    fetchOpt: {
        headers: {
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,pt-BR;q=0.2,pt;q=0.2,en-US;q=0.2',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Content-Type': 'application/x-www-form-urlencoded',
            'DNT': '1',
            'Pragma': 'no-cache',
            // eslint-disable-next-line max-len
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36',
            'X-Requested-With': 'XMLHttpRequest'
        },
        ignoreCustomGlobalHeader: true
    }
};

const H5FetchUtil = {
    isIgnoredUrl (videoUrl) {
        if (/\.swf/i.test(videoUrl)) { return true; }
    },
    generateH5VideoHtml (videoUrl, imageUrl) {
        return `<video controls autoplay src="${videoUrl}"></video>`;
    },
    fetchOpt: {
        headers: {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, sdch',
            'Accept-Language': 'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,pt-BR;q=0.2,pt;q=0.2,en-US;q=0.2',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'DNT': '1',
            'Pragma': 'no-cache',
            'Upgrade-Insecure-Requests': '1',
            // eslint-disable-next-line max-len
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1'
            // Cookie:_T_WM=825bb4f859d587d80941b33434b85a07
        },
        ignoreCustomGlobalHeader: true
    }
};

const OtherH5Video = {
    videoInfoReg: /<video.+?src=(['"])(.*?)\1/i,
    // 根据 url 获取 h5 视频url
    fetchVideo (url, opt) {
        const emitter = new EventEmitter();
        RestHelp.baseRest.get(url, extend({}, H5FetchUtil.fetchOpt, opt))
            .on('error', function () { emitter.emit('error'); })
            .on('success', function (data) {
                let videoData = (data || '').match(OtherH5Video.videoInfoReg);
                if (videoData && videoData.length === 3 && isHttp.test(videoData[2])) {
                    emitter.emit('success', videoData[2]);
                } else {
                    emitter.emit('error');
                }
            });
        return emitter;
    }
};

const QQH5Video = {
    fetchVideoBaseUrl (vid) {
        // eslint-disable-next-line max-len
        return `https://h5vv.video.qq.com/getinfo?vid=${vid}&otype=json&platform=11001&defnpayver=0&appVer=3.0.0&sdtfrom=v3010&host=m.v.qq.com`;
    },
    // 在 qq视频的url中 获取 vid 号
    fetchVideoVID (url) {
        const result = url.match(/https?:\/\/v.qq.com.*\/([^/]+)\.([^.]+)$/i);
        return result ? result[1] : '';
    },
    // 根据 vid 号获取 h5 视频地址
    fetchVideo (vid, opt) {
        const emitter = new EventEmitter();
        RestHelp.baseRest.get(QQH5Video.fetchVideoBaseUrl(vid), extend({}, H5FetchUtil.fetchOpt, opt))
            .on('error', function () { emitter.emit('error'); })
            .on('success', function (data) {
                try {
                    let json = JSON.parse(data.replace(/^[^{]+/i, '').replace(/;$/, ''));
                    json = json.vl.vi[0];
                    emitter.emit('success', `${json.ul.ui[0].url}${json.fn}?vkey=${json.fvkey}`);
                } catch (e) {
                    emitter.emit('error');
                }
            });
        return emitter;
    }
};

const WeiboNormalVideo = {
    videoInfoReg: /<li\s+class=\\"WB_video.+?<\\\/li>/i,
    previewImageReg: /<img.+?src=\\"(.*?)\\"/i,
    midReg: /bigplay_button:(\d+):/i,
    actionDataReg: /action-data=\\"(.+?)\\"/i,
    fetchWeiboVideoHtmlUrl: 'http://weibo.com/aj/mblog/renderfeed?ajwvr=6',
    /**
     * 获取微博视频的相关请求参数
     * @param url
     * @param opt
     * @return {EventEmitter}
     */
    fetchParam: function (url, opt) {
        const emitter = new EventEmitter();
        RestHelp.baseRest.get(url, extend({}, NormalFetchUtil.fetchOpt, {
            headers: {
                'Cookie': 'SUB=_2AkMgxUxLdcNhrAJQnfwRzWLjZY9H-jzEiebBAn7uJhMyOhgv7moUqSVqxhyf7SC_vsPPWZHgxErXpX-wxQ..',
                'Origin': 'http://weibo.com'
            }
        }, opt)).on('error', function () {
            emitter.emit('error');
        }).on('success', function (data) {
            if (typeof data !== 'string') {
                return emitter.emit('error');
            }
            let param, temp, midInfo, actionDataInfo, imgInfo;
            let isSuccess = true;
            let videoInfo = data.match(WeiboNormalVideo.videoInfoReg);
            if (videoInfo) {
                videoInfo = videoInfo[0];
                midInfo = videoInfo.match(WeiboNormalVideo.midReg);
                actionDataInfo = videoInfo.match(WeiboNormalVideo.actionDataReg);
                imgInfo = videoInfo.match(WeiboNormalVideo.previewImageReg);
                if (!midInfo || !actionDataInfo || !imgInfo) {
                    isSuccess = false;
                }
            } else {
                isSuccess = false;
            }
            if (isSuccess) {
                param = {
                    isforward: '',
                    mid: midInfo[1]
                };
                actionDataInfo = actionDataInfo[1];
                actionDataInfo.split('&').forEach(function (p) {
                    temp = p.split('=');
                    param[temp[0]] = temp[1];
                });
                emitter.emit('success', imgInfo[1].replace(/\\/ig, ''), param);
            } else {
                emitter.emit('error');
            }
        });
        return emitter;
    },
    /**
     * 2. 获取视频的相关信息
     * 抛出事件:
     * 1. success        // function(html, img){}
     * 2. img-ready      // function(img){}
     * 3. html-ready     // function(html){}
     * 4. error          // function(){}
     *
     * @param url
     * @param opt
     * @returns {*|EventEmitter}
     */
    fetchVideo: function (url, opt) {
        const emitter = new EventEmitter();
        WeiboNormalVideo.fetchParam(url, opt).on('success', function (previewImage, param) {
            previewImage = isHttp.test(previewImage) ? previewImage : false;
            emitter.emit('img-ready', previewImage);
            RestHelp.baseRest.post(WeiboNormalVideo.fetchWeiboVideoHtmlUrl, extend({}, NormalFetchUtil.fetchOpt, {
                headers: {
                    'Referer': url,
                    // eslint-disable-next-line max-len
                    'Cookie': 'SUB=_2AkMgxUxLdcNhrAJQnfwRzWLjZY9H-jzEiebBAn7uJhMyOhgv7moUqSVqxhyf7SC_vsPPWZHgxErXpX-wxQ..',
                    'Origin': 'http://weibo.com'
                }
            }, opt), param).on('error', function () {
                emitter.emit('error');
            }).on('success', function (data) {
                if (data && data.code === '100000' && data.data && data.data.html) {
                    const html = data.data.html;// .replace(/<\/?div>/ig, '');
                    emitter.emit('html-ready', html);
                    emitter.emit('success', html, previewImage);
                } else {
                    emitter.emit('error');
                }
            });
        }).on('error', function () {
            emitter.emit('error');
        });
        return emitter;
    }
};

const WeiboH5Video = {
    isIgnoredUrl (longUrl) {
        return false;
    },
    previewImageReg: /"page_pic"\s*:\s*({[^{}]+})/i,
    videoInfoReg: /"media_info"\s*:\s*({[^{}]+})/i,
    longUrlReg: /"url_struct"\s*:\s*(\[[^[\]]+])/i,
    fetchLongUrl (data) {
        let temp;
        let structData = data.match(WeiboH5Video.longUrlReg);
        try { temp = JSON.parse(structData[1]); } catch (e) {}
        if (temp && Array.isArray(temp) && temp.length && temp[0]) {
            return (temp[0].url_long || '');
        }
    },
    fetchImageUrl (data) {
        const imgData = data.match(WeiboH5Video.previewImageReg);
        if (imgData && imgData.length === 2) {
            try { return JSON.parse(imgData[1]).url; } catch (e) {}
        }
        return '';
    },
    fetchVideoUrl (data) {
        const videoData = data.match(WeiboH5Video.videoInfoReg);
        if (videoData && videoData.length === 2) {
            try { return JSON.parse(videoData[1]).stream_url; } catch (e) {}
        }
        return '';
    },
    fetchWeiboH5VideoHtmlBaseUrl (mid) {
        return `http://m.weibo.cn/status/${mid}?mblogid=${mid}`;
    },
    /**
     * 1. 获取视频的相关信息
     * @param mid
     * @param opt
     * @param more {boolean} 是否更深一层的获取 h5 视频地址（对应 longUrl ）
     * @return {EventEmitter}
     */
    fetchVideo: function (mid, opt, more) {
        const emitter = new EventEmitter();
        RestHelp.baseRest.get(WeiboH5Video.fetchWeiboH5VideoHtmlBaseUrl(mid), extend({}, H5FetchUtil.fetchOpt, opt))
            .on('error', function () { emitter.emit('error'); })
            .on('success', function (data) {
                let imgUrl = WeiboH5Video.fetchImageUrl(data || '');
                let videoUrl = WeiboH5Video.fetchVideoUrl(data || '');
                let longUrl = WeiboH5Video.fetchLongUrl(data || '');

                // 1. 条件：图片不存在 || 视频地址已被排除 || 原文地址已被排除
                // 1. 异常：返回异常数据
                if (!imgUrl || H5FetchUtil.isIgnoredUrl(videoUrl) || WeiboH5Video.isIgnoredUrl(longUrl)) {
                    return emitter.emit('error');
                }

                // 2. 已知：图片存在
                // 2. 条件：视频地址不存在 || 明确要到原文中查找视频
                // 2. 过度：下一级处理（尝试到原文中查找）
                if (!videoUrl || more) {
                    if (!longUrl) {
                        // 异常：没有原文
                        return emitter.emit('error');
                    } else {
                        let tempValue, tempEmitter;
                        if ((tempValue = QQH5Video.fetchVideoVID(longUrl))) {
                            tempEmitter = QQH5Video.fetchVideo(tempValue, opt);
                        } else {
                            tempEmitter = OtherH5Video.fetchVideo(longUrl, opt);
                        }
                        return tempEmitter.on('error', () => {
                            // 异常：在原文中查找不到视频信息
                            emitter.emit('error');
                        }).on('success', (videoUrl) => {
                            // 正常：在原文中找到视频信息
                            emitter.emit('success', videoUrl, imgUrl);
                        });
                    }
                }

                // 3. 已知：图片存在、视频存在、明确不到原文中查找视频信息
                // 3. 正常：返回正常数据
                return emitter.emit('success', videoUrl, imgUrl);
            });

        return emitter;
    }
};

module.exports = {
    normal: {
        weibo: WeiboNormalVideo.fetchVideo // function(url, opt) {return EventEmitter}
    },
    h5: {
        weibo: WeiboH5Video.fetchVideo, // function(mid, opt，more) {return EventEmitter}
        qq: QQH5Video.fetchVideo, // function(vid, opt) {return EventEmitter}
        other: OtherH5Video.fetchVideo // function(url, opt) {return EventEmitter}
    }
};
