/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const ThemeManage = require('@component-util/theme-manage');

/**
 * 皮肤管理公共模块 (vue插件)
 * 使用方法：
 *
 * import ThemeManageVuePlugin from "@component-util/theme-manage/lib/theme-manage.vue-plugin.js";
 *
 * 0.0 暴露 ThemeManage
 * ThemeManageVuePlugin.ThemeManage,
 *
 * 1.1 安装（只能调用一次）
 * Vue.use(ThemeManageVuePlugin, 'black');
 *
 * 2.1 Vue 实例内的使用（注册）
 * let vm = new Vue({
 *      theme: {
 *          // js皮肤中所定义的key（这个需要全局唯一）
 *          jsDataKey: '',
 *          // js皮肤发生切换时的回调（即：这里需要vue实例自己实现皮肤的切换）
 *          jsDataHandler: function(themeData, themeName){},
 *          // 这里一般做远程请求改变皮肤
 *          beforeChangeHandler: function(themeName){ return new Promise() },
 *          // 界面皮肤切换完成后的回调（有error则说明切换失败）
 *          afterChangeHandler: function(themeName, error) {}
 *      }
 * });
 *
 * 2.2. Vue 实例内的使用使用方法（实例方法）
 * vm.changeTheme(name)
 *
 * 2.3. Vue 实例内的使用使用方法（实例属性）
 * vm.theme.value      // 当前皮肤的名称
 * vm.theme.changing   // 是否正在修改皮肤
 *
 * Created by wuyaoqian on 2017/3/31.
 */

/**
 * js皮肤的数据管理
 */
const JsThemeHelp = {
    /**
     * 'module-key-name' : {
     *      theme: 'theme-name',
     *      value: {theme-data}
     * }, ...
     */
    themeData: {},
    /**
     * 'module-key-name' : {
     *      tempData: JsThemeHelp.themeData['module-key-name'],
     *      handlers: Set
     * }, ...
     */
    watchData: {},
    /**
     * 监听JS皮肤数据的变化
     * @param key
     * @param handler
     */
    watch: function (key, handler) {
        let TD = JsThemeHelp.themeData;
        let WD = JsThemeHelp.watchData;
        if (!WD[key]) {
            WD[key] = {
                tempData: TD[key],
                handlers: new Set()
            };
            Object.defineProperty(TD, key, {
                get: function () { return WD[key].tempData; },
                set: function (newValue) {
                    // 验证 newValue 的有效性
                    if (!newValue || !newValue.theme || !newValue.value) { return; }
                    // 验证是否是当前皮肤
                    if (WD[key].tempData && WD[key].tempData.theme === newValue.theme) { return; }
                    // 保存新值
                    WD[key].tempData = newValue;
                    // 触发数据回调
                    WD[key].handlers.forEach((handler) => {
                        handler(newValue.value, newValue.theme);
                    });
                }
            });
        }
        WD[key].handlers.add(handler);
    },
    /**
     * 取消监听
     * @param key
     * @param handler
     */
    unWatch: function (key, handler) {
        let WD = JsThemeHelp.watchData;
        if (WD[key]) {
            WD[key].handlers.delete(handler);
        }
    }
};

// 设置js皮肤的回调句柄
ThemeManage.add.setJsThemeCallBackHandler(function (data, theme) {
    // 有效性判断
    if (!data || !data.key || typeof data.key !== 'string' || !data.val) { return; }
    // theme 是否相等性判断
    if (JsThemeHelp.themeData[data.key] && JsThemeHelp.themeData[data.key].theme === theme) { return; }
    // 将切换js皮肤后的颜色值存放在 JsThemeHelp.themeData[key] 之中（其它地方会监听 JsThemeHelp.themeData[key] 值的变化）
    JsThemeHelp.themeData[data.key] = {
        theme: theme,
        value: data.val
    };
    // 放在另一个 key 之下，方便多处监听
    if (!data.alt || typeof data.alt !== 'string') { return; }
    JsThemeHelp.themeData[data.alt] = {
        theme: theme,
        value: data.val
    };
});

const ThemeManageVuePlugin = {

    /**
     * 暴露 ThemeManage
     */
    ThemeManage: ThemeManage,

    /**
     * 基于 theme-manage 的皮肤 vue 插件
     * @param {object} Vue - Vue类
     * @param {string} initThemeName - 皮肤名称
     */
    install (Vue, initThemeName) {
        // 定义全局属性
        const themeDataStore = {
            changing: false,
            value: ''
        };

        // 定义回调方法
        const asyncThemeChange = function (error, name, cb) {
            if (error) {
                cb && typeof cb === 'function' && cb.call(this, name, error);
                themeDataStore.changing = false;
            } else {
                ThemeManage.change(name, (name) => {
                    themeDataStore.value = name;
                    cb && typeof cb === 'function' && cb.call(this, name);
                    themeDataStore.changing = false;
                });
            }
        };

        // 扩展相关属性或方法
        Vue.mixin({
            data: function () {
                return {
                    theme: themeDataStore
                };
            },
            /**
             * 在挂载实例前监听并应用js皮肤
             * 注意：
             * handler 是静态的（当前Vue的所有实例共享一个handler），所以在 beforeMount 时，需要让当前实例临时生成一个新的 handler，
             * this.__jsThemeHandler__ = handler.bind(this)， 然后需要在 beforeDestroy 中销毁；
             */
            beforeMount: function () {
                let OptTheme = this.$options.theme;
                let key = OptTheme && this.$options.theme.jsDataKey;
                let handler = OptTheme && this.$options.theme.jsDataHandler;
                if (OptTheme && key && typeof key === 'string' && handler && typeof handler === 'function') {
                    handler = this.__jsThemeHandler__ = handler.bind(this);
                    if (JsThemeHelp.themeData[key]) {
                        handler(JsThemeHelp.themeData[key].value, JsThemeHelp.themeData[key].theme);
                    }
                    JsThemeHelp.watch(key, handler);
                }
            },
            // 在销毁实例前取消监听js皮肤的变化
            beforeDestroy: function () {
                if (this.__jsThemeHandler__) {
                    JsThemeHelp.unWatch(this.$options.theme.jsDataKey, this.__jsThemeHandler__);
                    delete this.__jsThemeHandler__;
                }
            },
            methods: {
                /**
                 * 更改皮肤
                 * @param {string} name - 皮肤名称
                 * @param {function(theme, error)|{before:function(theme),after:function(theme, error)}} opt
                 */
                changeTheme (name, opt) {
                    // 正在切换或皮肤名称没有变化 => 直接返回
                    if (themeDataStore.changing || themeDataStore.value === name) { return; }
                    // 规整参数
                    let self = this;
                    let before = function (theme) { return Promise.resolve(); };
                    let after = function (theme, error) {};
                    let OptTheme = self.$options.theme || {};
                    if (typeof opt === 'function') {
                        after = opt;
                    } else if (opt) {
                        before = typeof opt.before === 'function' ? opt.before : before;
                        after = typeof opt.after === 'function' ? opt.after : after;
                    } else {
                        before = typeof OptTheme.beforeChangeHandler === 'function'
                            ? OptTheme.beforeChangeHandler
                            : before;
                        after = typeof OptTheme.afterChangeHandler === 'function'
                            ? OptTheme.afterChangeHandler
                            : after;
                    }
                    // 设置正在切换中
                    themeDataStore.changing = true;
                    // 切换的相关回调
                    before.call(self, name).then(() => {
                        asyncThemeChange.call(self, null, name, after);
                    }).catch((error) => {
                        asyncThemeChange.call(self, error, name, after);
                    });
                }
            }
        });

        // 初始化皮肤
        themeDataStore.changing = true;
        asyncThemeChange(null, initThemeName, null);
    }

};

module.exports = ThemeManageVuePlugin;
