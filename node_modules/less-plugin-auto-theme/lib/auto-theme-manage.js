/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';
const fs = require('fs');
const path = require('path');

/**
 * Less Plugin Visitor
 */
module.exports = function (less, pluginManager) {
    const keyframesRegex = /^@(-[A-Za-z]+-)?keyframes/i;
    // 因为 less-file-plugin 是倒序查找的，所以这里需要 reverse 处理
    const lessFileManages = [
        new less.FileManager(),
        ...pluginManager.getFileManagers()
    ].reverse();

    /**
     * 此类主要是为了获取皮肤文件内定义变量
     */
    class ThemeVisitorImpl {
        constructor (autoThemeInstance) {
            this.isReplacing = true;
            this.autoThemeInstance = autoThemeInstance;
            this.autoThemeInstance.themeVariables = {};
        }

        visitDeclaration (ruleNode) {
            const filename = ruleNode._fileInfo ? ruleNode._fileInfo.filename : '';
            // console.log("visitDeclaration:", ruleNode.name, ruleNode.variable, filename);
            if (ruleNode.variable && this.autoThemeInstance.options.themeFileUrlPattern.test(filename)) {
                this.autoThemeInstance.themeVariables[ruleNode.name] = true;
            }
        }

        visitImport (importNode, visitArgs) {
            const result = this.resolveThemeImport(importNode, visitArgs);
            // 注意：theme 中 import 的是 theme 才会追加到 themeVariables 中
            if (result) {
                // 手动解析（ 因为其它地方需要立即需要 ）
                this.autoThemeInstance.parse(result.content, result.options, (root) => {
                    this.autoThemeInstance._themeVisitor.visit(root);
                });
            }
        }

        resolveThemeImport (importNode) {
            let filename = importNode.path.value;
            const directory = importNode.fileInfo().currentDirectory;
            if (/^\./.test(filename)) {
                filename = path.join(directory, filename);
            }
            if (!this.autoThemeInstance.options.themeFileUrlPattern.test(filename)) {
                return null;
            }
            const options = {
                paths: this.autoThemeInstance.options.paths
            };
            const fileManager = lessFileManages.find((fm) => fm.supportsSync(filename, directory, options));
            if (fileManager) {
                const result = fileManager.loadFileSync(filename, directory, options);
                let content = result;
                if (result && result.filename) {
                    options.filename = result.filename;
                }
                if (result && result.contents) {
                    content = result.contents;
                }
                return {
                    content: content,
                    options: options
                };
            }
        }
    }

    /**
     * 自动化皮肤管理
     * @param opt {object} {
     *      // 是否是皮肤文件的判断规则
     *      themeFileUrlPattern: /\/theme\/.+\.less$/i,
     *      // 从基础样式文件中找到皮肤文件的相对路径
     *      themeFileDirRelativeBaseFile: ['./theme', './less/theme']
     * }
     * @constructor
     */
    function AutoThemeManage (opt) {
        this.options = opt || {};
        this.options.themeFileDirRelativeBaseFile = this.options.themeFileDirRelativeBaseFile || ['./theme'];
        this.options.themeFileUrlPattern = this.options.themeFileUrlPattern || /[\\/]theme[\\/].+\.less$/i;
        this.options.paths = this.options.paths || [];
        this._contentVisitor = new less.visitors.Visitor(this);
        this._themeVisitor = new less.visitors.Visitor(new ThemeVisitorImpl(this));
    }

    AutoThemeManage.prototype = {
        isReplacing: false,
        isPreEvalVisitor: true,
        run: function (root) {
            const process = function (instance, themeRoot, contentRoot) {
                themeRoot && instance._themeVisitor.visit(themeRoot);
                contentRoot && instance._contentVisitor.visit(contentRoot);
            };
            const fileInfo = this.getInfo(root);
            this.isThemeFile = fileInfo.isThemeFile;
            this.filename = fileInfo._fileInfo ? fileInfo._fileInfo.filename : '';
            this.directory = fileInfo._fileInfo ? fileInfo._fileInfo.currentDirectory : '';
            if (this.isThemeFile) {
                // 当前入口为皮肤样式（ 可直接提取 themeVariables => 解析root => 得到只有皮肤的样式 ）
                this.fetchImportRoot(this.filename, (themeRoot) => {
                    process(this, themeRoot, root);
                });
            } else if (this.filename && this.directory) {
                // 当前入口为基础样式（ 有当前文件的信息，先查找 themeRoot 然后提取 themeVariables => 解析root => 得到去除了皮肤的样式 ）
                this.fetchThemeRoot(this.directory, (themeRoot) => {
                    process(this, themeRoot, root);
                });
            } else {
                // 当前入口为基础样式（ 无当前文件的信息，也就无需提取 themeVariables => 解析root => 得到原始样式 ）
                process(this, null, root);
            }
        },
        visitRuleset: function (rulesetNode) {
            if (!rulesetNode.root) {
                this.filter(rulesetNode.rules);
            } else if (this.isThemeFile) {
                for (let i = 0; i < rulesetNode.rules.length; i++) {
                    if (keyframesRegex.test(rulesetNode.rules[i].name)) {
                        // remove keyframes（ in theme file ）
                        rulesetNode.rules.splice(i, 1);
                        i--;
                    }
                }
            }
        }
    };

    /**
     * 获取当前入口文件的皮肤相关的信息
     * @param root
     * @return {object} {
     *  isThemeFile: false,
     *  currentDirectory: ''
     * }
     */
    AutoThemeManage.prototype.getInfo = function (root) {
        let ret = {}; let temp;
        if (root && root.rules && root.rules.length) {
            root.rules.some((rule) => {
                if (rule.type === 'Ruleset') {
                    temp = this.getInfo(rule);
                    if (temp._fileInfo) {
                        ret = temp;
                        return true;
                    }
                } else if (rule._fileInfo) {
                    ret.isThemeFile = this.options.themeFileUrlPattern.test(rule._fileInfo.filename);
                    ret._fileInfo = rule._fileInfo;
                    return true;
                }
                return false;
            });
        }
        return ret;
    };

    /**
     * 根据基础样式文件所在的目录，获取一个皮肤文件的 root
     * @param baseFileDir
     * @param cb
     */
    AutoThemeManage.prototype.fetchThemeRoot = function (baseFileDir, cb) {
        let isFound = false;
        const instance = this; const isDirExist = function (dir) {
            try {
                fs.accessSync(dir, fs.F_OK);
                return fs.lstatSync(dir).isDirectory();
            } catch (e) {
                return false;
            }
        };
        instance.options.themeFileDirRelativeBaseFile.some((relativePath) => {
            const themeDir = path.join(baseFileDir, relativePath);
            if (isDirExist(themeDir)) {
                fs.readdirSync(themeDir).some((themeFile) => {
                    const filename = path.join(themeDir, themeFile);
                    if (instance.options.themeFileUrlPattern.test(filename)) {
                        instance.fetchImportRoot(filename, cb);
                        return (isFound = true);
                    }
                    return false;
                });
            }
            return isFound;
        });
        return !isFound && cb();
    };

    /**
     * 根据 importFileName 获取 root
     * @param importFileName
     * @param cb
     */
    AutoThemeManage.prototype.fetchImportRoot = function (importFileName, cb) {
        this.parse(fs.readFileSync(importFileName, 'utf8'), {
            filename: importFileName
        }, cb);
    };

    /**
     * 解析内容
     * @param {String} content
     * @param {Object} opt
     * @param {Function} cb
     */
    AutoThemeManage.prototype.parse = function (content, opt, cb) {
        less.parse(content, Object.assign({
            filename: this.filename,
            paths: this.options.paths,
            processImports: false
        }, opt), (error, root) => {
            if (error) { throw new Error(error); }
            cb(root);
        });
    };

    /**
     * 根据指定 node 判断是否是皮肤中定义的变量值
     * @param node
     * @return {*}
     */
    AutoThemeManage.prototype.isThemeValue = function (node) {
        if (!this.themeVariables || !node) {
            // 1. 参数不合法，直接返回 false
            return false;
        } else if (node.type === 'Declaration') {
            // 2. 继续往下查找
            return this.isThemeValue(node.value);
        } else if (node.type === 'MixinCall') {
            // 3. 继续往下查找
            let valueIsInTheme = false;
            node.arguments.some((value) => {
                if (this.isThemeValue(value.value)) {
                    valueIsInTheme = true;
                    return true;
                }
                return false;
            });
            return valueIsInTheme;
        } else if (node.type === 'Value' || node.type === 'Expression' || node.type === 'Call') {
            // 4. 继续往下查找
            let valueIsInTheme = false;
            (node.args || node.value).some((value) => {
                if (this.isThemeValue(value)) {
                    valueIsInTheme = true;
                    return true;
                }
                return false;
            });
            return valueIsInTheme;
        } else if (node.type === 'Variable') {
            // 5. 找到目标
            return this.themeVariables[node.name];
        } else {
            // 6. 其它情况, 直接返回 false
            return false;
        }
    };

    /**
     * 过滤规则（皮肤样式文件与基础样式文件，是一个相反的过滤规则）
     * @param rules
     */
    AutoThemeManage.prototype.filter = function (rules) {
        for (let i = 0; i < rules.length; i++) {
            // ignore malformed rule
            if (!rules[i] || !rules[i].type) {
                continue;
            }
            // console.log(rules[i], rules[i].type, rules[i].name);
            // 1. Declaration and not variabile definition
            // 2. MixinCall
            if (
                rules[i].type === 'MixinCall' || (
                    rules[i].type === 'Declaration' && !rules[i].variable
                )
            ) {
                const isThemeRule = this.isThemeValue(rules[i]);
                if (
                    (this.isThemeFile && !isThemeRule) || // 当前入口是皮肤样式文件 且 这条规则也并未引用皮肤变量
                    (!this.isThemeFile && isThemeRule) // 当前入口不是皮肤样式文件 且 在这条规则中引用了皮肤变量
                ) {
                    // remove Declaration
                    rules.splice(i, 1);
                    i--;
                }
            }
        }
    };

    return AutoThemeManage;
};
