"use strict";
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MultiMapMessageType_1 = require("./MultiMapMessageType");
var REQUEST_TYPE = MultiMapMessageType_1.MultiMapMessageType.MULTIMAP_ADDENTRYLISTENER;
var RESPONSE_TYPE = 104;
var RETRYABLE = false;
var MultiMapAddEntryListenerCodec = (function () {
    function MultiMapAddEntryListenerCodec() {
    }
    MultiMapAddEntryListenerCodec.calculateSize = function (name, includeValue, localOnly) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.BOOLEAN_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.BOOLEAN_SIZE_IN_BYTES;
        return dataSize;
    };
    MultiMapAddEntryListenerCodec.encodeRequest = function (name, includeValue, localOnly) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, includeValue, localOnly));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendBoolean(includeValue);
        clientMessage.appendBoolean(localOnly);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    MultiMapAddEntryListenerCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readString();
        return parameters;
    };
    MultiMapAddEntryListenerCodec.handle = function (clientMessage, handleEventEntry, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var messageType = clientMessage.getMessageType();
        if (messageType === BitsUtil_1.BitsUtil.EVENT_ENTRY && handleEventEntry !== null) {
            var key = null;
            if (clientMessage.readBoolean() !== true) {
                key = toObjectFunction(clientMessage.readData());
            }
            var value = null;
            if (clientMessage.readBoolean() !== true) {
                value = toObjectFunction(clientMessage.readData());
            }
            var oldValue = null;
            if (clientMessage.readBoolean() !== true) {
                oldValue = toObjectFunction(clientMessage.readData());
            }
            var mergingValue = null;
            if (clientMessage.readBoolean() !== true) {
                mergingValue = toObjectFunction(clientMessage.readData());
            }
            var eventType;
            eventType = clientMessage.readInt32();
            var uuid;
            uuid = clientMessage.readString();
            var numberOfAffectedEntries;
            numberOfAffectedEntries = clientMessage.readInt32();
            handleEventEntry(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries);
        }
    };
    return MultiMapAddEntryListenerCodec;
}());
exports.MultiMapAddEntryListenerCodec = MultiMapAddEntryListenerCodec;
//# sourceMappingURL=MultiMapAddEntryListenerCodec.js.map