/*!
 * Copyright (c) 2010-2016 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2016 湖南蚁坊软件有限公司。保留所有权利。
 */

"use strict";

/**
 * 皮肤管理公共模块
 * 使用方法：
 * import ThemeResource from 'path to this';
 *
 * // 1. 注册皮肤资源
 * ThemeResource.regist({'black':[cssObject, jsFunction], ...})
 * // 2. 删除皮肤资源
 * ThemeResource.remove(index)
 * // 3. 更改皮肤（本地修改，即不请求远程修改服务器资源）
 * ThemeResource.change('black');
 * // 4. 获取当前的皮肤名称
 * ThemeResource.getName();
 *
 * Created by wuyaoqian on 15/9/23.
 */

/**
 * 存储皮肤资源列表
 * @type {object} - {
 *     'white': { module1: [...], module2: [...], ...},
 *     'black': { module1: [...], module2: [...], ...},
 *     ...
 * }
 */
const skins = {};
// 当前显示的皮肤名称
let curSkin = "";

/**
 * 应用皮肤
 * @private
 */
const _applySkin = function (resource, skin) {
    resource.css && resource.css.use();
    resource.js && (function () {
        if (resource.js.cb && typeof resource.js.cb === 'function') {
            resource.js.cb(resource.js(), skin);
        } else {
            resource.js();
        }
    })();
};

/**
 * 皮肤资源列表
 * @param {object} resources - {
 *      // 皮肤名称: [css皮肤资源对象，js皮肤函数回调]
 *      // 注意：css必须是使用 useable-loader 编译后的对象（'style-loader/useable!css-loader!autoprefixer-loader!less-loader'）
 *      'white': [object || null, function || null],
 *      'black': [object || null, function || null],
 *      ...
 * }
 * @param {string} module - 模块
 */
const registSkinResources = function (resources, module) {
    // 0 临时记录
    let resource;
    module = module || 'none';

    // 1. 注册皮肤
    Object.keys(resources).forEach((skin) => {
        let css = resources[skin][0];
        let js = resources[skin][1];
        resource = {};
        skins[skin] = skins[skin] || {};
        skins[skin][module] = skins[skin][module] || [];
        if (css && typeof css.use === 'function') {
            resource.css = css;
        }
        if (js && typeof js === 'function') {
            resource.js = js;
        }
        skins[skin][module].push(resource);
    });

    // 2. 应用皮肤
    if (curSkin && resource) {
        _applySkin(resource, curSkin);
    }
};

/**
 * 删除皮肤资源
 * @param {string} module - 注册时候的模块名称
 */
const removeSkinResources = function (module) {
    Object.keys(skins).forEach((skin) => {
        Object.keys(skins[skin]).some((m) => {
            if (module === m) {
                skins[skin][module].forEach((resource) => {
                    resource && resource.css && resource.css.unuse();
                });
                delete skins[skin][module];
                return true;
            }
        });
    });
};

/**
 * 更改皮肤
 * @param {string} skin - 皮肤名称
 * @return {string} - 修改后的皮肤名称
 */
const changeSkin = function (skin) {
    if (!skin || typeof skin !== 'string') {return curSkin;}
    if (skin === curSkin) {return curSkin;}

    // 1. 激活新的 css、js 皮肤
    let skinOnObj = skins[skin];
    let applied = [];
    if (skinOnObj) {
        Object.keys(skinOnObj).forEach((module) => {
            skinOnObj[module].forEach((resource) => {
                _applySkin(resource || {}, skin);
            });
            applied.push(module);
        });
    }

    // 2. 删除当前的 css 皮肤 (注意：js皮肤无法被删除，只能覆盖)
    let skinOffObj = skins[curSkin];
    if (skinOffObj) {
        Object.keys(skinOffObj).forEach((module) => {
            if (!applied.includes(module)) { return; }
            skinOffObj[module].forEach((resource) => {
                resource && resource.css && resource.css.unuse();
            });
        });
    }

    // 3. 记录当前 皮肤
    return curSkin = skin;
};

module.exports = {
    regist: registSkinResources,
    remove: removeSkinResources,
    change: changeSkin,
    getName () { return curSkin; }
};