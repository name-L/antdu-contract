/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * message-service.js
 * Created by wuyaoqian on 2018/9/5.
 */

/**
 * message-service.js
 *
 * 使用方法（全局）：
 * import {MessageService} from '@component-util/micro-pubsub-service';
 *
 * // 监听数据
 * MessageService.on(name, fn);
 * // 发送数据
 * MessageService.send(name, ...);
 *
 * ---------------------------------- 分隔线 ---------------------------------
 *
 * 使用方法（局部：所有发布的服务就会局限在 LocalMessageService 之中）：
 * import {MessageService} from '@component-util/micro-pubsub-service';
 *
 * // 用法1: 传统继承模式
 * class LocalMessageService extends MessageService {}
 * // 用法2: 动态生成继承类模式（ 注意：每一次调用 getService() 返回的子类将是不同的 ）
 * let LocalMessageService = MessageService.getService();
 * // 用法3: 动态生成继承类模式（ 注意：每一次调用 getService(name) 返回的子类将会根据 name 进行复用 ）
 * let LocalMessageService = MessageService.getService('LocalMessageService');
 *
 * // 监听数据（其余的类似 ...）
 * LocalMessageService.on(name, fn);
 *
 * Created by wuyaoqian on 2018/9/5.
 */

const EventEmitter = require('events');
const {getInstance, constructorCheck} = require('../util/service-util.js');
const BaseService = require('../util/base-service.js');

class MessageService extends BaseService {
    /**
     * 消息服务构造方法
     * @param {string} name - 消息服务名称
     */
    constructor (name) {
        super();
        constructorCheck.call(this, new.target, MessageService, name, () => {
            this.name = name;
            this.emitter = new EventEmitter();
        });
    }

    /**
     * 发送数据
     * @param {*} data 任意多个数据
     * @return {MessageService} - 当前实例
     */
    send (...data) {
        if (this.emitter) {
            this.emitter.emit(this.name, ...data);
        }
        return this;
    }

    /**
     * 监听数据
     * @param {function} fn - 回调函数
     * @return {function}
     */
    on (fn) {
        if (!this.emitter || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = fn.bind(null);
        this.emitter.on(this.name, bind_fn);
        return () => {
            this.emitter.removeListener(this.name, bind_fn);
        };
    }

    /**
     * 销毁消息服务
     */
    destroy () {
        if (this.emitter) {
            this.emitter.removeAllListeners(this.name);
            delete this.emitter;
            delete this.constructor.services[this.name];
        }
    }

    // ------------------------------------- 分隔线 --------------------------------------------

    /**
     * 发布一个消息服务
     * @param {string} name
     * @return {MessageService}
     */
    static publish (name) {
        return getInstance(this, MessageService, 'publish', [name]);
    }

    /**
     * 监听消息
     * @param {string} name - 消息名称
     * @param {function} fn - 回调函数
     * @return {function}
     */
    static on (name, fn) {
        return getInstance(this, MessageService, 'on', [name]).on(fn);
    }

    /**
     * 发送消息
     * @param {string} name - 消息名称
     * @param {*} data - 任意多个数据
     * @return {MessageService}
     */
    static send (name, ...data) {
        let instance = getInstance(this, MessageService, 'send', [name], true);
        if (instance) {
            instance.send(...data);
        }
        return this;
    }
}

/**
 * 静态方法：
 * 0. getService             // function(name) { return SubMessageService; }
 * 1. publish                // function(name) { return instance; }
 * 2. on                     // function(name, fn) { return selfOffHandler; }
 * 3. send                   // function(name, ...data) { return clazz; }
 *
 * 实例方法：
 * 1. send                   // function(...data) { return instance; }
 * 2. on                     // function(fn) { return selfOffHandler; }
 * 3. destroy                // function() { return undefined; }
 */
module.exports = MessageService;
