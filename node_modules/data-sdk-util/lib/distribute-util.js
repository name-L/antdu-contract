/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * 分布式消息发送与接收
 * Created by wuyaoqian on 2017/2/10.
 */

const CasterClient = require('caster-client-sdk');
const EventEmitter = require('events');
const path = require('path');
const logger = require('log4js-config').get('eefung.data-sdk-util.' + path.basename(__filename));

// 已生成的实例对象
const instances = {};

class Distribute {
    constructor (key = 'node-distribute-topic', receiveSelfMessage = false) {
        this.isRegistedMessageListener = false;
        this.instance = null;
        this.emitter = new EventEmitter();
        this.key = key;
        this.receiveSelfMessage = receiveSelfMessage;
        this.init();
    }

    /**
     * 初始化 caster client
     * @return {Promise}
     */
    init () {
        const self = this;
        return new Promise(function (resolve) {
            if (!self.instance) {
                CasterClient.topicManage.getInstance(self.key, self.receiveSelfMessage).then((instance) => {
                    self.instance = instance;
                    resolve(self.instance);
                });
            } else {
                resolve(self.instance);
            }
        });
    }

    /**
     * 分布式发送数据
     * @param key {string} 待发送数据的key
     * @param val {*} 待发送数据
     * @return {Distribute}
     */
    emit (key, val) {
        const self = this;
        self.init().then((instance) => {
            logger.debug('Distribute message starting publish, val: ', val);
            instance.publish({
                key: key,
                val: val
            }).then(() => {
                logger.debug('Distribute message publish successful, val: ', val);
            }).catch(() => {});
        });
        return self;
    }

    /**
     * 监听及接收分布式数据
     * @param key {string}  接收数据的 key
     * @param fn {function} 回调函数          // function(val) {}
     * @return {Distribute}
     */
    on (key, fn) {
        const self = this;
        self.emitter.on(key, fn);
        if (!self.isRegistedMessageListener) {
            self.isRegistedMessageListener = true;
            self.init().then((instance) => {
                instance.addMessageListener(function (data) {
                    logger.debug('Distribute message receive successful, data: ', data);
                    self.emitter.emit(data.key, data.val);
                });
            });
        }
        return self;
    }
}

module.exports = {
    /**
     * 获取一个分布式实例
     * @param topic {string} 发布订阅的通道名称
     * @param receiveSelfMessage {boolean} 是否接收自己发送出去的数据
     * @return {*|Distribute} {
     *      emit: function(key, val) {}
     *      on: function(key, function(val){}) {}
     * }
     */
    getInstance (topic, receiveSelfMessage) {
        return instances[topic] || (instances[topic] = new Distribute(topic, receiveSelfMessage));
    }
};
