/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * 推送服务地址管理
 * Created by wuyaoqian on 2017/1/18.
 */

const EventEmitter = require('events');
const CoordinatorClient = require('coordinator-client-wrapper');
const logger = require('log4js-config')
    .get('eefung.data-sdk-socket.address-manage.' + require('path').basename(__filename));

const idGenerator = function (config) {
    return Object.keys(config).reduce((str, k) => {
        if (!['backOff'].includes(k)) {
            str += JSON.stringify(config[k]);
        }
        return str;
    }, '');
};

/**
 * 推送地址管理（coordinator）
 */
class CoordinatorAddress {
    /**
     * 初始化
     *
     * // CoordinatorClient 所需的参数
     * @param {object} config
     * @param {string} config.host
     * @param {string} config.port
     * @param {object} [config.backOff=null]
     * @param {number} [config.backOff.min=1000]
     * @param {number} [config.backOff.max=1000*60]
     * @param {number} [config.backOff.factor=1.5]
     * @param {number} [config.backOff.jitter=0]
     * @param {number} [config.backOff.maxAttempts=10]
     *
     * // 服务发现的实例ID
     * @param {string} config.aid
     *
     * @param {string} [id];
     */
    constructor (config, id) {
        this.emitter = null;
        this.aid = config.aid;
        this.config = Object.assign({}, config);
        delete this.config.aid;
        this.coordinator = new CoordinatorClient(this.config);
        this.id = id || idGenerator(config);
    }

    /**
     * 1. fetch push address    格式如下： http://www.example.com:8080
     * @returns {EventEmitter}
     */
    fetch () {
        const self = this;
        if (!self.emitter) {
            self.emitter = new EventEmitter();
            // process.nextTick(function () {
            //     self.emitter.emit("success", "http://172.19.104.120:9078");
            //     delete self.emitter;
            // });
            self.coordinator.getServerByAppId(self.aid).then((url) => {
                logger.info('fetch push server(aid: %s) address(%s) success.', self.aid, url);
                self.emitter.emit('success', url);
                delete self.emitter;
            }).catch((error) => {
                self.emitter.emit('error', error);
                delete self.emitter;
            });
        }
        return self.emitter;
    }
}

const instances = {};

module.exports = {
    getInstance (config) {
        let id = idGenerator(config);
        return (instances[id] = instances[id] || new CoordinatorAddress(config, id));
    }
};
