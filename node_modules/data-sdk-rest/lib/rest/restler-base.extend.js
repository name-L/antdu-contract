/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * 扩展 restler
 * Created by wuyaoqian on 13-11-18. <br />
 */

const path = require('path');
const restler = Object.assign({}, require('restler')); // 这样做是为了防止其它地方在引用require("restler")时的冲突
const timeElapseLogger = require('log4js-config').get('eefung.data-sdk-rest.time-elapse.' + path.basename(__filename));
const config = require('config').system;

// 扩展 multipart
require('../other/restler-multipart.extend.js').extendInit(restler.Request);
// 扩展 delay-request
require('../other/restler-delay-request.extend.js').extendInit(restler.Request);

const customGlobalHeaderObject = {};
const customGlobalHeaderArray = [];
const elapseLogMinTime = Number.isFinite(config.elapseLogMinTime) ? config.elapseLogMinTime : 0;

/**
 * 从 Restler 内抽取出来的，并有所改动
 */
const RestlerOverride = {
    /**
     * 重新整理 options 参数
     *
     * @param options {object} 修改前的 options
     * @param method {string}  请求方法类型（GET，POST）
     * @returns {object}       返回修改后的 options
     */
    shortcutOptions: function (options, method) {
        options = options || {};
        options.method = method;
        options.parser = (typeof options.parser !== 'undefined') ? options.parser : restler.parsers.auto;

        if (typeof options.query === 'object') {
            Object.keys(options.query).forEach(function (key) {
                if (
                    options.query[key] === undefined ||
                    options.query[key] === null ||
                    (typeof options.query[key] === 'number' && isNaN(options.query[key]))
                ) {
                    delete options.query[key];
                }
            });
        }
        if (typeof options.data === 'object') {
            Object.keys(options.data).forEach(function (key) {
                if (
                    options.data[key] === undefined ||
                    options.data[key] === null ||
                    (typeof options.data[key] === 'number' && isNaN(options.data[key]))
                ) {
                    delete options.data[key];
                }
            });
        }

        if (!options.headers) {
            options.headers = {};
        }

        if (!options.ignoreCustomGlobalHeader) {
            customGlobalHeaderArray.forEach(function (fn) {
                options.headers = Object.assign(options.headers, fn(options));
            });
            Object.keys(customGlobalHeaderObject).forEach(function (key) {
                options.headers[key] = (typeof customGlobalHeaderObject[key] === 'function')
                    ? customGlobalHeaderObject[key](options)
                    : customGlobalHeaderObject[key];
                if (!options.headers[key]) {
                    delete options.headers[key];
                }
            });
        }

        if (options.headers['user-agent']) {
            options.headers['User-Agent'] = options.headers['User-Agent'] || options.headers['user-agent'];
            delete options.headers['user-agent'];
        }
        if (!options.headers['User-Agent']) {
            options.headers['User-Agent'] = 'rest client of nodejs';
        }

        return RestlerOverride.advancedOptions(options);
    },
    /**
     * 高级扩展 options 参数
     * @param options {object} 修改前的 options
     * @returns {object}       返回修改后的 options
     */
    advancedOptions: function (options) {
        return options;
    },
    /**
     * 基本的请求函数(加上请求成功所花费的时间日志)
     * @param method {string}
     * @param url {string}
     * @param options {object} 除了 restler 所需参数之外, 这里还额外增加了一些自定义的参数: {
     *      req: null,
     *      res: null,
     *      socket: null,
     *      [pipe-response, pipe-download]: false || function(dataResponseHeader){ return boolean },
     *      [pipe-request, pipe-upload]: false
     * }
     * @returns {*}
     */
    baseRequest: function (method, url, options) {
        let startTime, elapseTime, elapseHandler, instance, username, logMinTime;
        if (timeElapseLogger.isLevelEnabled('info')) {
            startTime = Date.now();
        }

        options = options || {};

        // 设定超时机制
        options.timeout = options.timeout || config.sdkRestTimeout;
        options.timeout = (!Number.isFinite(options.timeout) || options.timeout <= 5000)
            ? 1000 * 60 * 2
            : options.timeout;

        // 日志的最小记录时间
        logMinTime = Number.isFinite(options.logMinTime) ? options.logMinTime : elapseLogMinTime;

        instance = restler.request(url, RestlerOverride.shortcutOptions(options, method.toUpperCase()));
        if (timeElapseLogger.isLevelEnabled('info')) {
            elapseHandler = function () {
                elapseTime = Date.now() - startTime;
                if (elapseTime > logMinTime) {
                    username = restler.tryResolveUserName(options);
                    timeElapseLogger.info(
                        (username ? 'user(' + username + ') ' : '') + 'request(%s) url(%s) taking %ss',
                        method, url, elapseTime / 1000
                    );
                }
            };
            instance.on('download-success', elapseHandler);
            instance.on('success', elapseHandler);
        }

        instance.on('timeout', function (time) {
            const errorCodeDesc = {
                'errorCode': 'request-timeout',
                'data': {
                    time: time
                }
            };
            const customResponse = {
                statusCode: 500,
                raw: '这是SDK抛出的自定义请求超时: ' + (time / 1000) + 's'
            };
            this.emit('error', errorCodeDesc, customResponse);
            this.emit('complete', errorCodeDesc, customResponse);
        });

        return instance;
    }
};

/**
 * 向外暴露一个添加自定义请求头的方法
 * @param key {string}
 * @param val {string|function} function: val(options)
 */
restler.addCustomGlobalHeader = function (key, val) {
    if (typeof key === 'function') {
        customGlobalHeaderArray.push(key);
        return this;
    }
    if (typeof key === 'string' && key) {
        // 强行将 user-agent 换成标准的 User-Agent
        if (key === 'user-agent') {
            key = 'User-Agent';
        }
        if (val && (typeof val === 'string' || typeof val === 'function')) {
            customGlobalHeaderObject[key] = val;
        }
    }
    return this;
};

/**
 * 向外暴露一个解析用户名的方法
 * @param options {object}
 * @return {string}
 */
restler.tryResolveUserName = function (options) {
    return '-';
};

// 重载 get、patch、post、put、del、head 方法
restler.get = RestlerOverride.baseRequest.bind(RestlerOverride, 'GET');
restler.patch = RestlerOverride.baseRequest.bind(RestlerOverride, 'PATCH');
restler.post = RestlerOverride.baseRequest.bind(RestlerOverride, 'POST');
restler.put = RestlerOverride.baseRequest.bind(RestlerOverride, 'PUT');
restler.del = restler.delete = RestlerOverride.baseRequest.bind(RestlerOverride, 'DELETE');
restler.head = RestlerOverride.baseRequest.bind(RestlerOverride, 'HEAD');

/**
 * 重新包装好后，再次Exports出去
 *
 * 1. get
 * 2. patch
 * 3. post
 * 4. put
 * 5. del
 * 6. head
 */
module.exports = restler;
