/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const EventEmitter = require('events');
const {getInstance, constructorCheck} = require('../util/service-util.js');
const BaseService = require('../util/base-service.js');

/**
 * regist-service.js
 *
 * 使用方法（全局）：
 * import {RegistService} from '@component-util/micro-pubsub-service';
 *
 * // 发布注册服务
 * const service = RegistService.publish(name, defaultOpt);
 * // 获取注册的结果
 * let result = service.getResult();
 * // 监听发布之后的注册
 * let selfOffHandler_regist = service.onRegist((opt, result) => {});
 * // 监听发布之后的移除
 * let selfOffHandler_remove = service.onRemove((opt, result) => {});
 * // 销毁注册服务
 * service.destroy()
 *
 * // 往服务中注册一个数据选项
 * const id = RegistService.regist(name, opt, 1);
 * // 删除已注册的数据选项
 * RegistService.remove(name, id);
 *
 * ---------------------------------- 分隔线 ---------------------------------
 *
 * 使用方法（局部：所有发布的服务就会局限在 LocalRegistService 之中）：
 * import {RegistService} from '@component-util/micro-pubsub-service';
 *
 * // 用法1: 传统继承模式
 * class LocalRegistService extends RegistService {}
 * // 用法2: 动态生成继承类模式（ 注意：每一次调用 getService() 返回的子类将是不同的 ）
 * let LocalRegistService = RegistService.getService();
 * // 用法3: 动态生成继承类模式（ 注意：每一次调用 getService(name) 返回的子类将会根据 name 进行复用 ）
 * let LocalRegistService = RegistService.getService('LocalRegistService');
 *
 * // 发布注册服务（其余的类似 ...）
 * const service = LocalRegistService.publish(name, defaultOpt);
 *
 *
 * Created by wuyaoqian on 2018/9/5.
 */

class RegistService extends BaseService {
    /**
     * 注册服务的构造方法
     * @param {string} name - 注册服务的名称
     * @param {object|function} defaultOpt - 默认配置
     */
    constructor (name, defaultOpt) {
        super();
        constructorCheck.call(this, new.target, RegistService, name, () => {
            this.name = name;
            this.defaultOpt = defaultOpt;
            this.result = [];
            this.emitter = new EventEmitter();
        });
    }

    /**
     * 获取注册的结果
     * @return {Array|Array<Object>}
     */
    getResult () {
        return this.result || [];
    }

    /**
     * @callback RegistFN
     * @param {object} regist-opt
     * @param {array} all-result
     */
    /**
     * 监听后续的注册（即：publish 之后的 regist）
     * @param {RegistFN} fn - 回调方法
     * @return {function}
     */
    onRegist (fn) {
        if (!this.emitter || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = fn.bind(this);
        this.emitter.on('regist', bind_fn);
        return () => {
            this.emitter.removeListener('regist', bind_fn);
        };
    }

    /**
     * @callback RemoveFN
     * @param {object} remove-opt
     * @param {array} all-result
     */
    /**
     * 监听后续的取消注册（即：publish 之后的 remove）
     * @param {RemoveFN} fn - 回调方法
     * @return {function|null}
     */
    onRemove (fn) {
        if (!this.emitter || !fn || typeof fn !== 'function') {
            return () => {};
        }
        let bind_fn = fn.bind(this);
        this.emitter.on('un_regist', bind_fn);
        return () => {
            this.emitter.removeListener('un_regist', bind_fn);
        };
    }

    /**
     * 销毁注册服务
     */
    destroy () {
        if (this.emitter) {
            this.emitter.removeAllListeners('regist');
            this.emitter.removeAllListeners('un_regist');
            delete this.emitter;
            delete this.result;
            delete this.defaultOpt;
            delete this.constructor.services[this.name];
        }
    }

    /**
     * 发布一个注册服务
     * @param {string} name - 注册服务的名称
     * @param {object|function} defaultOpt - 待注册的默认数据选项
     */
    static publish (name, defaultOpt) {
        // 当前获取到的 instance 只能是这三种情况：old-publish, old-regist, new-publish
        let instance = getInstance(this, RegistService, 'publish', [name, defaultOpt || {}]);
        // publish: has defaultOpt, regist: no defaultOpt
        if (!instance.defaultOpt) {
            // 重新规整 defaultOpt
            instance.defaultOpt = defaultOpt || {};
            // 重新规整 result 结果
            instance.result = instance.result.map((opt) => {
                return Util.processOpt(opt, instance.defaultOpt, opt);
            });
        }
        return instance;
    }

    /**
     * 往注册服务中（注意：不管是否已发布都可以注册）注册一份数据选项
     * @param {string} name - 注册服务的名称
     * @param {object} opt - 待注册的数据选项
     * @param {number|undefined} [index] - 序号
     * @return {number}
     */
    static regist (name, opt, index) {
        let instance = getInstance(this, RegistService, 'regist', [name]);
        let resultOpt = {};
        // 增加一些只读属性，方便排序及取消
        Object.defineProperty(resultOpt, '__data__', {
            enumerable: false,
            writable: false,
            value: {
                id: Math.random(),
                index: index
            }
        });
        if (!instance.defaultOpt) {
            // 未发布（临时缓存 opt 到 result 中，当调用 publish 方法时，将会自动重新处理这个 opt）
            resultOpt = Object.assign(resultOpt, opt);
        } else {
            // 已发布（立即结合 defaultOpt 处理 opt）
            resultOpt = Util.processOpt(resultOpt, instance.defaultOpt, opt);
            // 延时发送 regist 消息（因为需要等 result 的数据完善）
            setTimeout(() => {
                instance.emitter.emit('regist', resultOpt, instance.result);
            }, 0);
        }
        instance.result.push(resultOpt);
        if (typeof index === 'number') {
            instance.result.sort((a, b) => a.__data__.index - b.__data__.index);
        }
        return resultOpt.__data__.id;
    }

    /**
     * 删除已注册的数据选项
     * @param {string} name - 注册服务的名称
     * @param {number} id
     */
    static remove (name, id) {
        let instance = getInstance(this, RegistService, 'remove', [name], true);
        if (!instance) { return; }
        for (let i = 0, result = instance.result; i < result.length; i++) {
            if (id === result[i].__data__.id) {
                let resultOpt = result.splice(i, 1);
                return setTimeout(() => {
                    resultOpt && Array.isArray(resultOpt) && instance.emitter.emit('un_regist', resultOpt[0], result);
                }, 0);
            }
        }
    }
}

const Util = {
    processOpt (retOpt, defaultOpt, targetOpt) {
        if (typeof defaultOpt === 'function') {
            return Object.assign(retOpt, defaultOpt(targetOpt) || targetOpt);
        }
        return Object.assign(retOpt, Object.assign({}, defaultOpt, targetOpt));
    }
};

/**
 * 静态方法：
 * 0. getService             // function(name) { return SubRegistService; }
 * 1. publish                // function(name, defaultOpt) { return instance; }
 * 2. regist                 // function(name, opt, index) { return regist-id; }
 * 3. remove                 // function(name, regist-id) { return undefined }
 *
 * 实例方法：
 * 1. getResult              // function() { return array; }
 * 2. onRegist               // function(fn) { return selfOffHandler; }
 * 3. onRemove               // function(fn) { return selfOffHandler; }
 * 4. destroy                // function() { return undefined; }
 */
module.exports = RegistService;
