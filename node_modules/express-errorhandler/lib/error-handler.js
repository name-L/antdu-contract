/**
 * Created by wuyaoqian on 14/12/15.
 *
 * 大部分代码是从 express errorhandler 模块复制过来的
 */

"use strict";

/**
 * Module dependencies.
 * @private
 */

var extend = require('deep-extend');
var accepts = require('accepts');
// var escapeHtml = require('escape-html');
var fs = require('fs');
var util = require('util');
var path = require("path");
var logger = require("log4js-config").get((global.log_prefix_name || "eefung.webapp.") + "errorhandler." + path.basename(__filename));

/**
 * Module variables.
 * @private
 */
var inspect = util.inspect;
var toString = Object.prototype.toString;

/* istanbul ignore next */
// var defer = typeof setImmediate === 'function' ? setImmediate : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)); };

var contentDataReplace = function (content, req, opt, data, status, err) {
    // str = "test{{data}}test";
    // ret[0] = "{{data}}";
    // ret[1] = "data";
    var pattern = /{{([^{}]+)}}/ig, ret, newContent = content, temp;
    while (ret = pattern.exec(content)) {
        temp = data[ret[1]];
        if (typeof temp === "function") {
            newContent = newContent.replace(ret[0], temp.call(opt, req, status, err));
        } else {
            newContent = newContent.replace(ret[0], temp || "");
        }
    }
    return newContent;
};

var renderHtml = function (req, res, next, opt, err, status, html) {
    //var stack = String(err.stack || '').split('\n').slice(1).map(function (v) { return '<li>' + escapeHtml(v).replace(/  /g, ' &nbsp;') + '</li>'; }).join('');
    html = typeof html === "string" ? html : "";
    // 变量替换
    html = contentDataReplace(html, req, opt, opt.data, status, err);
    // 设置 content-type
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    // 发送内容到浏览器
    res.end(html);
};

var getCustomHtml = function (req, opt, status) {
    if (!opt.content) {
        return false;
    }
    if (typeof opt.content === "string") {
        return opt.content;
    }
    if (typeof opt.content === "function") {
        return opt.content.call(opt, req);
    }
    if (typeof opt.content === "object") {
        var val = opt.content[status + ""] || opt.content["default"];
        if (val && typeof val === "string") { return val; }
        if (val && typeof val === "function") { return val.call(opt, req); }
    }
    return false;
};

/**
 * 渲染输出结果
 * @param req
 * @param res
 * @param next
 * @param opt {object} {
 *      content: string || function(req){} || {
 *          "404": string || function(req){}
 *          "500": string || function(req){}
 *          "[status]": string || function(req){}
 *          "default": string || function(req){}
 *      },
 *      data: {
 *          "[any]": string || function(req, status, err)
 *      },
 *      redirect: function(req, status, err, type){}
 * }
 * @param err
 */
var responseHandler = function (req, res, next, opt, err) {
    // negotiate
    var accept = accepts(req);
    var type = accept.types('html', 'json', 'text');
    var status = res.statusCode, customHtml;
    var redirect;

    // clone opt
    opt = extend({}, opt);

    // Security header for content sniffing
    res.setHeader('X-Content-Type-Options', 'nosniff');

    // check redirect option
    if (opt.redirect && typeof opt.redirect === 'function' && (redirect = opt.redirect.call(opt, req, status, err, type)) && typeof redirect === 'string') {
        return res.redirect(redirect);
    }

    // check error-msg & status-code
    opt.data = opt.data || {};
    if (!opt.data['error-msg']) {
        opt.data['error-msg'] = err ? err.message : '-';
    }
    if (!opt.data['status-code']) {
        opt.data['status-code'] = status;
    }

    // html
    if (type === 'html') {
        if (customHtml = getCustomHtml(req, opt, status)) {
            renderHtml(req, res, next, opt, err, status, customHtml);
        } else {
            fs.readFile(path.join(__dirname, '../public/error.html'), 'utf8', function (e, html) {
                if (e) {
                    return next(e);
                }
                renderHtml(req, res, next, opt, err, status, html);
            });
        }
    }
    // json
    else if (type === 'json') {
        res.setHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({
            status: status,
            errors: contentDataReplace("{{error-msg}}", req, opt, opt.data, status, err)
        }));
    }
    // plain text
    else {
        res.setHeader('Content-Type', 'text/plain');
        res.end(contentDataReplace("status: {{status-code}} \nerrors: {{error-msg}}", req, opt, opt.data, status, err));
    }
};

/**
 * Error handler:
 *
 * Development error handler, providing stack traces
 * and error message responses for requests accepting text, html,
 * or json.
 *
 * Text:
 *
 *   By default, and when _text/plain_ is accepted a simple stack trace
 *   or error message will be returned.
 *
 * JSON:
 *
 *   When _application/json_ is accepted, connect will respond with
 *   an object in the form of `{ "error": error }`.
 *
 * HTML:
 *
 *   When accepted connect will output a nice html stack trace.
 *
 * @return {Function}
 * @api public
 */
module.exports = function errorHandler (app, opt) {

    if (typeof app.use === "function") {
        // 这样写是确保, 此404拦截是在 errorHandler 之后
        process.nextTick(function () {
            app.use(function last404ErrorHandler (req, res, next) {
                res.status(404);
                responseHandler(req, res, next, opt || {});
            });
        });
    }

    return function errorHandler (err, req, res, next) {
        // respect err.status
        if (err.status) {
            res.statusCode = err.status;
        }

        // default status code to 500
        if (res.statusCode < 400) {
            res.statusCode = 500;
        }

        // log the error
        if (~[401, 403, 404].indexOf(res.statusCode)) {
            logger.warn("global warning, request url: %s, status: %s, msg: %s", req.url, res.statusCode, err.message || '-');
        } else {
            logger.error("global error, request url: %s, status: %s \n", req.url, res.statusCode, stringify(err));
        }

        // cannot actually respond
        if (res._header) {
            return req.socket.destroy();
        }

        responseHandler(req, res, next, opt || {}, err);
    };
};

/**
 * Stringify a value.
 * @api private
 */
function stringify (val) {
    var stack = val.stack;

    if (stack) {
        return String(stack);
    }

    var str = String(val);

    return str === toString.call(val) ? inspect(val) : str;
}

