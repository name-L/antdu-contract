/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件有限公司。保留所有权利。
 */

"use strict";

/**
 * sdk 入口
 * Created by wuyaoqian on 15/5/28.
 */

const baseRestler = require("./lib/rest/restler-base.extend.js");
const userTokenRestler = require("./lib/rest/restler-user-auth.extend.js");
const socketUserTokenRestler = require("./lib/rest/restler-user-auth.socket.extend.js");
const appTokenRestler = require("./lib/rest/restler-app-auth.extend.js");
const tokenProvider = require("./lib/token/token-provider.js");
const tokenEvent = require("./lib/token/token-event.js");
const userDataManage = require("./lib/user/user-data.store.js");
const IpUtil = require("./lib/util/ip-util.js");
const ErrorCodeUtil = require("./lib/util/error-code-util.js");
const LocalUtil = require("./lib/util/local-util.js");

// 覆盖并实现获取 username 的方法
baseRestler.tryResolveUserName = function (options) {
    let username = "";
    if (options.req) {
        username = (userDataManage.session.userInfo.get(options.req.session) || {}).username;
        username = username || options.loginUserName || IpUtil.getClientIp(options.req) || 'unknown-rest';
    }
    else if (options.socket) {
        username = (userDataManage.socketRequest.restInfo.get(options.socket.request) || {}).username;
        username = username || IpUtil.getClientIp(options.socket.request) || 'unknown-socket';
    }
    return username;
};

module.exports = {
    /**
     * 基本的sdk请求对象
     */
    baseRestler: baseRestler,
    /**
     * 此sdk请求对象的方法，将会自动管理用户的Token
     */
    userTokenRestler: userTokenRestler,
    /**
     * 专门给 在长连接 中保存rest数据调用的
     */
    socketUserTokenRestler: socketUserTokenRestler,
    /**
     * 此sdk请求对象的方法，将会自动管理应用的Token
     */
    appTokenRestler: appTokenRestler,
    /**
     * Token服务管理
     */
    tokenProvider: tokenProvider,
    /**
     * 用户token相关全局事件
     */
    userTokenEvent: tokenEvent,
    /**
     * 用户相关数据管理 (sdk中需要的一些基本数据)
     * 注意, 登录成功后, 需要调用如下方法 (sdk内部所需):
     * 1. userDataManage.session.userToken.set(session, token);
     * 2. userDataManage.session.userInfo.set(session, userid, username);
     *
     * 如用到了 socket.io(socket与rest之间有联系); 则还需调用如下方法:
     * 3. userDataManage.socketRequest.restInfo.set(socketRequest, baseRestInfo);
     */
    userDataManage: userDataManage,
    /**
     * 在 request 中获取 ip 的工具类
     */
    ipUtil: IpUtil,
    /**
     * ErrorCode 相关的工具类
     */
    errorCodeUtil: ErrorCodeUtil,
    /**
     * 本地化相关的工具类
     */
    localUtil: LocalUtil
};

