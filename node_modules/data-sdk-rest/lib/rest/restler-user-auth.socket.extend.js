/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * 与推送相关的 restler
 * Created by wuyaoqian on 16/1/13.
 */

// const path = require("path");
const baseRestler = require('./restler-base.extend.js');
const normalAuthRestler = require('./restler-user-auth.extend.js');
const socketAuthRestler = Object.assign({}, normalAuthRestler);
const EventEmitter = require('events');
const userDataManage = require('../user/user-data.store.js');

/**
 * 处理 专门从 推送内调用 rest 请求的方法
 * @param method
 * @param url
 * @param options
 * @returns {EventEmitter}
 */
const processPushRest = function (method, url, options) {
    const processEmitter = new EventEmitter();
    const context = {
        socket: options.socket
    };
    const baseRestInfo = userDataManage.socketRequest.restInfo.get(context.socket.request);
    const request = function (context, token) {
        const UserAuthPrepareRequest = normalAuthRestler[Symbol.for('UserAuthPrepareRequest')];
        const instance = UserAuthPrepareRequest.call(baseRestler[method](url, options), context, {
            user: {
                userid: baseRestInfo.userid,
                username: baseRestInfo.username
            },
            token: token
        });
        for (let i = 0, keys = processEmitter.eventNames(); i < keys.length; i++) {
            instance.on(keys[i], processEmitter.emit.bind(processEmitter, keys[i]));
        }
    };
    if (context.socket.token) {
        process.nextTick(() => {
            request(context, { access_token: context.socket.token.access_token || context.socket.token });
        });
    } else {
        baseRestInfo['session-store'].get(baseRestInfo.sid, function (error, sess) {
            let token = userDataManage.session.userToken.get(sess);
            if (error || !sess || !token) {
                let type = error ? 'session-fetch-error' : 'session-expired';
                let errorCodeDesc = {
                    'errorCode': type,
                    'data': {
                        sid: baseRestInfo.sid,
                        socketid: context.socket.id,
                        username: baseRestInfo.username,
                        session: !!sess,
                        token: !!token
                    }
                };
                const customResponse = {
                    statusCode: 500,
                    raw: `这是SDK主动抛出的自定义异常信息(SocketUserRequest: ${type})`
                };
                processEmitter.emit('error', errorCodeDesc, customResponse);
                processEmitter.emit('complete', errorCodeDesc, customResponse);
                return;
            }
            context.socket_session = sess;
            request(context, token);
        });
    }
    return processEmitter;
};

// 重载 get、patch、post、put、del、head 方法
socketAuthRestler.get = processPushRest.bind(this, 'get');
socketAuthRestler.patch = processPushRest.bind(this, 'patch');
socketAuthRestler.post = processPushRest.bind(this, 'post');
socketAuthRestler.put = processPushRest.bind(this, 'put');
socketAuthRestler.del = socketAuthRestler.delete = processPushRest.bind(this, 'delete');
socketAuthRestler.head = processPushRest.bind(this, 'head');

module.exports = socketAuthRestler;
