"use strict";
var ClientAuthenticationCodec_1 = require("../codec/ClientAuthenticationCodec");
var ClientAuthenticationCustomCodec_1 = require("../codec/ClientAuthenticationCustomCodec");
var ConnectionAuthenticator = (function () {
    function ConnectionAuthenticator(connection, client) {
        this.connection = connection;
        this.client = client;
        this.clusterService = this.client.getClusterService();
    }
    ConnectionAuthenticator.prototype.authenticate = function (ownerConnection) {
        var _this = this;
        var credentials = this.createCredentials(ownerConnection);
        return this.client.getInvocationService()
            .invokeOnConnection(this.connection, credentials)
            .then(function (msg) {
            var authResponse = ClientAuthenticationCodec_1.ClientAuthenticationCodec.decodeResponse(msg);
            if (authResponse.status === 0) {
                _this.connection.address = authResponse.address;
                if (ownerConnection) {
                    _this.clusterService.uuid = authResponse.uuid;
                    _this.clusterService.ownerUuid = authResponse.ownerUuid;
                }
                return true;
            }
            else {
                return false;
            }
        });
    };
    ConnectionAuthenticator.prototype.createCredentials = function (ownerConnection) {
        var groupConfig = this.client.getConfig().groupConfig;
        var uuid = this.clusterService.uuid;
        var ownerUuid = this.clusterService.ownerUuid;
        var customCredentials = this.client.getConfig().customCredentials;
        var clientMessage;
        if (customCredentials != null) {
            var credentialsPayload = this.client.getSerializationService().toData(customCredentials);
            clientMessage = ClientAuthenticationCustomCodec_1.ClientAuthenticationCustomCodec.encodeRequest(credentialsPayload, uuid, ownerUuid, ownerConnection, 'NJS', 1);
        }
        else {
            clientMessage = ClientAuthenticationCodec_1.ClientAuthenticationCodec.encodeRequest(groupConfig.name, groupConfig.password, uuid, ownerUuid, ownerConnection, 'NJS', 1);
        }
        return clientMessage;
    };
    return ConnectionAuthenticator;
}());
module.exports = ConnectionAuthenticator;
//# sourceMappingURL=ConnectionAuthenticator.js.map