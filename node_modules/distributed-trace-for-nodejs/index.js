var trace = require("./trace");
var defaultOpts = require("./defaultOpts");
var utils = require('./utils');

var localOpts = {};
var merge_options = function (obj1, obj2) {
    var obj3 = {};
    for (var attrname in obj1) {
        obj3[attrname] = obj1[attrname];
    }
    for (var attrname in obj2) {
        obj3[attrname] = obj2[attrname];
    }
    return obj3;
};

function init(opts) {
    localOpts = merge_options(defaultOpts, opts);
    if (localOpts.debugTrace != defaultOpts.debugTrace) {
        trace.setDebugTrace(localOpts.debugTrace);
    }
    if (localOpts.serviceName) {
        if (/[A-Z]/.test(localOpts.serviceName)) {
            throw 'opts.serviceName muse be lowerCase , for input : ' + localOpts.serviceName;
        } else {
            trace.setServiceName(localOpts.serviceName);
        }
    }
    if (localOpts.zipkinUrl != defaultOpts.zipkinUrl) {
        trace.setZipkinUrl(localOpts.zipkinUrl);
    }
}

function traceFilter(req, res, next) {
    var t = new trace.Tracer({
        reqUrl: req.url,
        method: req.method,
        port: req.socket.localPort || localOpts.port || defaultOpts.port,
        timestamp: (req._time || req.timestamp || Date.now()) * 1000,
        clientIp: utils.getCustomerIp(req) || req.ip,
        userAgent: req.get('User-Agent'),
        parentId: req.get('spanId'),//从请求头中获取父spanId
        traceId: req.get('traceId') //从请求头中获取父traceId
    });

    req.zipkinTrace = t;
    //请求中添加跟踪
    req.headers['spanId'] = t.spanId;
    req.headers['traceId'] = t.traceId;
    res.on('finish', function () {
        t.record(t.generateZipkinData(res.statusCode));
    });

    next();
}

function toRequestHeader(req, headers) {
    if (req && req.zipkinTrace && req.zipkinTrace.spanId && req.zipkinTrace.traceId) {
        if (headers) {
            headers.spanid = req.zipkinTrace.spanId;
            headers.traceid = req.zipkinTrace.traceId;
            return headers;
        } else {
            return {
                spanid: req.zipkinTrace.spanId,
                traceid: req.zipkinTrace.traceId
            };
        }
    } else {
        return headers || {};
    }
}

exports.trace = traceFilter;
exports.init = init;
exports.toRequestHeader = toRequestHeader;