/// <reference types="bluebird" />
/// <reference types="node" />
import ClientConnection = require('./ClientConnection');
import ClientMessage = require('../ClientMessage');
import * as Promise from 'bluebird';
import Address = require('../Address');
import HazelcastClient from '../HazelcastClient';
export declare class Invocation {
    constructor(request: ClientMessage);
    request: ClientMessage;
    partitionId: number;
    address: Address;
    deadline: Date;
    connection: ClientConnection;
    deferred: Promise.Resolver<ClientMessage>;
    handler: (...args: any[]) => any;
    hasPartitionId(): boolean;
}
export declare class InvocationService {
    private correlationCounter;
    private eventHandlers;
    private pending;
    private client;
    private smartRoutingEnabled;
    private logger;
    invoke: (invocation: Invocation) => Promise<ClientMessage>;
    constructor(hazelcastClient: HazelcastClient);
    invokeOnConnection(connection: ClientConnection, request: ClientMessage, handler?: (...args: any[]) => any): Promise<ClientMessage>;
    invokeOnPartition(request: ClientMessage, partitionId: number): Promise<ClientMessage>;
    invokeOnTarget(request: ClientMessage, target: Address): Promise<ClientMessage>;
    invokeOnRandomTarget(request: ClientMessage): Promise<ClientMessage>;
    private invokeSmart(invocation);
    private invokeNonSmart(invocation);
    private sendToAddress(invocation, address);
    private send(invocation, connection);
    removeEventHandler(id: number): void;
    processResponse(buffer: Buffer): void;
}
export declare class ListenerService {
    private client;
    private listenerIdToCorrelation;
    private internalEventEmitter;
    constructor(client: HazelcastClient);
    registerListener(request: ClientMessage, handler: any, decoder: any, key?: any): Promise<string>;
    deregisterListener(request: ClientMessage, decoder: any): Promise<boolean>;
}
