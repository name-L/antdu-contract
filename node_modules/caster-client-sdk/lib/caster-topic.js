/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

"use strict";

/**
 * caster client topic store
 * Created by wuyaoqian on 2017/3/2.
 */

var path = require("path");
var EventEmitter = require("events");
var CasterClient = require("./caster-client.js");
var logger = require("log4js-config").get("eefung.webapp.caster-store." + path.basename(__filename));

var instances = {};
var uuidUtil = require("../util/uuid-util");

/**
 * caster topic
 * @param name {string}
 * @param receiveSelfMessage {boolean}
 * @constructor
 */
var CasterTopic = function (name, receiveSelfMessage) {
    var self = this;
    self.receiveSelfMessage = receiveSelfMessage;
    self.id = uuidUtil.timeBased();
    self.listeners = [];
    self.topicName = name;
    self.rawClient = null;
    self.rawTopic = null;

    CasterClient.getInstance().then(function (instance) {
        self.rawClient = instance.rawClient;
        self.rawTopic = self.rawClient.getReliableTopic(self.topicName);
        instance.on('reconnect', function (rawClient) {
            var oldListeners = self.listeners, oldRawTopic = self.rawTopic;
            self.rawClient = rawClient;
            self.rawTopic = rawClient.getReliableTopic(self.topicName);
            self.listeners = [];
            oldListeners.forEach(function (obj) {
                oldRawTopic.removeMessageListener(obj.id);
            });
            process.nextTick(function () {
                oldListeners.forEach(function (obj) {
                    self.addMessageListener(obj.listener);
                });
            });
        });
        self.emit('connected', self);
    });
};
CasterTopic.prototype = Object.create(EventEmitter.prototype);

/**
 * add message listener
 * @param listener {function}
 */
CasterTopic.prototype.addMessageListener = function (listener) {
    var self = this, id;
    if (!self.rawTopic) {
        return logger.error("addMessageListener has error: ", "caster topic not init");
    }
    id = self.rawTopic.addMessageListener(function (data) {
        if (!data || !data.messageObject || !data.messageObject.id) {
            return logger.warn("addMessageListener data receive error: ", data);
        }
        if (!self.receiveSelfMessage && data.messageObject.id === self.id) {
            return;
        }
        listener.call(this, data.messageObject.data);
    });
    self.listeners.push({
        id: id,
        listener: listener
    });
    return id;
};

/**
 * 往 CasterTopic 中发送数据
 * @param message {string} 数据
 * @return {Promise}
 */
CasterTopic.prototype.publish = function (message) {
    if (!this.rawTopic) {
        logger.error("publish has error: ", "caster topic not init");
        return Promise.reject();
    }
    return this.rawTopic.publish({
        id: this.id,
        data: message
    });
};

module.exports = {
    /**
     * 获取 caster 指定的 map
     * @param topicName {string} topic名称
     * @param receiveSelfMessage {boolean}
     * @return {Promise} {
     *      resolve: function(instance){}
     * }
     */
    getInstance: function (topicName, receiveSelfMessage) {
        return new Promise(function (resolve) {
            var instance = instances[topicName];
            if (!instance) {
                instance = instances[topicName] = new CasterTopic(topicName, receiveSelfMessage);
            }
            if (instance.rawTopic) {
                process.nextTick(function () {
                    resolve(instance);
                });
            } else {
                instance.on('connected', function () {
                    resolve(instance);
                });
            }
        });
    }
};