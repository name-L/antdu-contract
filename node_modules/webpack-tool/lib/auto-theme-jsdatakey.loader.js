/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * auto-theme-jsdatakey.loader.js
 * 功能：自动态生成一个按目录固定MD5的 jsDataKey 填充到以下两个位置（ 使其自动关联 ）
 *      [target-dir]/theme/*.js => key,
 *      [target-dir]/[*]/*.vue => jsDataKey
 * 参数：
 *
 * Created by wuyaoqian on 2020/7/18.
 */

const fs = require('fs');
const path = require('path');
const loaderUtils = require('loader-utils');
const md5 = require('@component-util/md5');
const pid = `${Math.random}`;

const Util = {
    /**
     * 同步判断指定目录是否存在
     * @param {string} dir
     */
    isDirExist: function (dir) {
        try {
            fs.accessSync(dir, fs.F_OK);
            return fs.lstatSync(dir).isDirectory();
        } catch (e) {
            return false;
        }
    },
    /**
     * 根据 pid, dir 计算一个 md5 值
     * @param {string} pid
     * @param {string} dir
     */
    getThemeRelativeKey: function (pid, dir) {
        return md5(`${pid}-${dir}`);
    }
};

module.exports = function (source) {
    const opt = loaderUtils.getOptions(this) || {};
    const projectId = opt.pid || pid;
    const jsDataKeyLabelForVue = opt.jsDataKeyLabelForVue || 'jsDataKey';
    const keyLabelInJsTheme = opt.keyLabelInJsTheme || 'key';
    const altKeyLabelInJsTheme = opt.altKeyLabelInJsTheme || 'alt';
    const dataKeyValuePattern = opt.dataKeyValuePattern || '{{AUTO-DATA-KEY-FOR-SAME-COMPONENT}}';
    const themeFilePattern = opt.themeFilePattern || /[\\/]theme[\\/].+\.js$/i;
    const themeFileDirRelativeTargetFile = opt.themeFileDirRelativeTargetFile || ['./theme'];
    const isThemeFile = themeFilePattern.test(this.resourcePath);
    const isVueFile = !isThemeFile && /\.vue$/i.test(this.resourcePath);

    if (isThemeFile) {
        const themeDirMD5 = Util.getThemeRelativeKey(projectId, path.join(this.resourcePath, '..'));
        return source.replace(
            new RegExp(`(['"]?)(${keyLabelInJsTheme})\\1:\\s*([^,]+)(,)`), (str, quote, key, val) => {
                // 值为 dataKeyValuePattern，则直接使用 themeDirMD5 代替
                if (new RegExp(`(['"])${dataKeyValuePattern}\\1`).test(val)) {
                    return `'${key}': '${themeDirMD5}',`;
                }
                // 其它情况，在 val 后追加一个 altKeyLabelInJsTheme: themeDirMD5 的键值对
                return `'${key}': ${val}, '${altKeyLabelInJsTheme}': '${themeDirMD5}',`;
            }
        );
    }

    if (isVueFile) {
        let themeDirMD5 = false;
        themeFileDirRelativeTargetFile.some((relativePath) => {
            const themeDir = path.join(this.resourcePath, relativePath);
            if (Util.isDirExist(themeDir)) {
                fs.readdirSync(themeDir).some((themeFile) => {
                    if (themeFilePattern.test(path.join(themeDir, themeFile))) {
                        themeDirMD5 = Util.getThemeRelativeKey(projectId, themeDir);
                        return true;
                    }
                    return true;
                });
            }
            return themeDirMD5;
        });
        if (themeDirMD5) {
            // 存在 js-theme 文件，且匹配 dataKeyValuePattern，则将 dataKeyValuePattern 替换成 themeDirMD5 值
            return source.replace(
                new RegExp(`(['"]?)${jsDataKeyLabelForVue}\\1:\\s*(['"])${dataKeyValuePattern}\\2`),
                `${jsDataKeyLabelForVue}: '${themeDirMD5}'`
            );
        }
    }

    return source;
};
