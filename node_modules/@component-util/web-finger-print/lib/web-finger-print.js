/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * web-finger-print.js
 * Created by wuyaoqian on 2020/2/21.
 */

const FingerPrint = require('fingerprintjs2');
const Cookie = require('js-cookie');
const extend = require('deep-extend');

let defaultOption = {
    timeout: 500,
    cookie: {
        key: 'fp',
        val: (str) => FingerPrint.x64hash128(str, 31),
        opt: {
            domain: '',
            path: '',
            expires: 30
        },
        callback: null
    }
};

let defaultFingerOpt = {
    excludes: {
        // ------ system default -------
        // Unreliable on Windows, see https://github.com/Valve/fingerprintjs2/issues/375
        'enumerateDevices': true,
        // devicePixelRatio depends on browser zoom, and it's impossible to detect browser zoom
        'pixelRatio': true,
        // DNT depends on incognito mode for some browsers (Chrome) and it's impossible to detect incognito mode
        'doNotTrack': true,
        // uses js fonts already
        'fontsFlash': true,
        // ------ user defined ----------
        userAgent: true,
        language: true,
        screenResolution: true,
        availableScreenResolution: true,
    },
    fonts: {
        extendedJsFonts: true
    }
};

let defaultFingerCallback = function (components) {
    let cookie_opt = this.cookie;
    let str = JSON.stringify(components);
    let id = cookie_opt.val(str);
    Cookie.set(cookie_opt.key, id, cookie_opt.opt || {});
    if (typeof cookie_opt.callback === 'function') {
        cookie_opt.callback(cookie_opt.key, id);
    }
};

let process = function (opt, fingerOpt, fingerCallback) {
    console.info(`process finger print after ${opt.type}`);
    FingerPrint.get(
        extend({}, defaultFingerOpt, fingerOpt),
        typeof fingerCallback === 'function' ? fingerCallback : defaultFingerCallback.bind(opt)
    );
};

/**
 * WEB指纹记录
 * @param {object} [opt]
 * @param {int} [opt.timeout=500]
 * @param {object} [opt.cookie]
 * @param {string} [opt.cookie.key=fp]
 * @param {function} [opt.cookie.val]
 * @param {object} [opt.cookie.opt]
 * @param {function} [opt.cookie.callback]
 * @param {object} [fingerOpt]
 * @param {function} [fingerCallback]
 */
module.exports = function (opt, fingerOpt, fingerCallback) {
    let _opt = extend({}, defaultOption, opt);
    _opt.cookie = _opt.cookie || {};
    if (typeof _opt.cookie.key !== 'string') {
        _opt.cookie.key = defaultOption.cookie.key;
    }
    if (typeof _opt.cookie.val !== 'function') {
        _opt.cookie.val = defaultOption.cookie.val;
    }
    if (window.requestIdleCallback) {
        _opt.type = 'idle';
        requestIdleCallback(process.bind(this, _opt, fingerOpt, fingerCallback));
    } else {
        _opt.type = 'timeout';
        _opt.timeout = (Number.isFinite(_opt.timeout)) ? _opt.timeout : defaultOption.timeout;
        setTimeout(process.bind(this, _opt, fingerOpt, fingerCallback), _opt.timeout);
    }
};

// 将 FingerPrint 暴露出去
module.exports.FingerPrint = FingerPrint;
// 将 JsCookie 暴露出去
module.exports.Cookie = Cookie;