/*!
 * Copyright (c) 2010-2021 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2021 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const path = require('path');
const fs = require('fs');

/**
 * 错误代码表管理
 * Created by wuyaoqian on 16/11/16.
 */

const ErrorCodeUtil = {
    /**
     * 检测是否是 JS 文件的正则表达式
     */
    isJsFileRegExp: /\.js$/i,
    /**
     * 替换 msg 中的 "{data.xxx}" 内容
     * result[1]: "{data.xxx}"
     * result[2]: "data."
     * result[3]: "xxx"
     */
    userDataRegExp: /({(data\.)([^}]+)})/igm
};

class ErrorCodeResourceManage {
    /**
     * ErrorCode Resource Manage Constructor
     * @param {Object} i18nResourceManage
     * @param {{
     *   moduleNameInLocalLang: String,
     *   basedir: String|Array<String>
     * }} config
     */
    constructor (i18nResourceManage, config) {
        this.__STORE__ = {};
        this.moduleNameInLocalLang = config.moduleNameInLocalLang || '_error-code_';
        this.basedir = (function (dir) {
            if (!dir || (Array.isArray(dir) && !dir.length)) {
                return null;
            }
            return (Array.isArray(dir) ? dir : [dir]).map(function (dir) {
                try {
                    if (fs.lstatSync(path.join(dir, 'translated')).isDirectory()) {
                        return path.join(dir, 'translated');
                    }
                    return dir;
                } catch (err) {
                    return dir;
                }
            });
        })(config.basedir || '');
        this.localManage = i18nResourceManage;
        if (!this.localManage) {
            throw new Error('Need LocalManage.initManage() first!');
        }
        this._loadResources();
    }

    /**
     * 将 转译好的 ErrorCode 信息转成以 ErrorCodeNumber为key 的 json 对象
     * 支持格式：
     * 1. '001110': 'translated message.'
     * 2. 'rest-error': 'translated message.'
     * 3. 'error-key': {text: 'translated message', code: [[1110], [100, 200], 'time-out', ['default-error']]}
     * 4. 'translated message.': [1110, [3100], [100, 200], 'time-out', ['default-error']]
     * 5. '002220': (code, data, opt) => { return ''; }
     * 6. 'error-key': {text: (code, data, opt) => { return ''; }, code: [...]}
     * @param {Object} translatedErrorCodes
     */
    _processTranslatedErrorCodeDescription (translatedErrorCodes) {
        return Object.keys(translatedErrorCodes).reduce(function (resource, key) {
            let codes = null;
            const val = translatedErrorCodes[key];
            let msg = '';
            if (Array.isArray(val)) {
                msg = key;
                codes = val;
            } else if (typeof val === 'object' && val.code && Array.isArray(val.code) && val.code.length) {
                msg = val.text || '';
                codes = val.code;
            } else if (typeof val === 'string' || typeof val === 'function') {
                msg = val;
                codes = parseInt(key);
                codes = Number.isNaN(codes) ? [key] : [codes];
            }
            if (codes) {
                let code = null;
                let start = 0;
                let end = 0;
                for (let i = 0; i < codes.length; i++) {
                    code = codes[i];
                    if (Array.isArray(code) && code.length === 2) {
                        for (start = code[0], end = code[1]; start <= end; start++) {
                            resource[start + ''] = msg;
                        }
                    } else {
                        resource[(Array.isArray(code) ? code[0] : code) + ''] = msg;
                    }
                }
            }
            return resource;
        }, {});
    }

    /**
     * 加载资源
     */
    _loadResources () {
        const self = this;
        if (self.basedir) {
            // 加载国际化：error-code 与 local-lang 分开存储的资源加载方法（ 旧的方式，不推荐这种写法了 2018-06-25 ）
            self.basedir.forEach(function (dir) {
                fs.readdirSync(dir).forEach(function (fileName) {
                    if (!ErrorCodeUtil.isJsFileRegExp.test(fileName)) { return; }
                    const lang = self.localManage.normalize(fileName.replace('.js', ''));
                    self.__STORE__[lang] = Object.assign(
                        self.__STORE__[lang] || {},
                        self._processTranslatedErrorCodeDescription(require(path.join(dir, fileName)))
                    );
                });
            });
        } else {
            // 加载国际化：error-code 存储在 local-lang 内的某个目录 (如：_error-code_) 的资源加载方法
            self.__STORE__ = self.localManage.reFormLangObj(
                self.moduleNameInLocalLang,
                self._processTranslatedErrorCodeDescription
            ) || {};
        }
    }

    /**
     * 根据 errorCodeNumber 获取相对应的转译好的错误描述信息
     * @param {String} lang
     * @param {String|Number} errorCodeNumber
     * @param {Object} [data]
     * @param {Object} [opt]
     * @returns {{
     *   msg: String|undefined,
     *   data: Object|undefined,
     *   code: Number|String
     * }|null}
     */
    _getTranslatedErrorCodeDescription (lang, errorCodeNumber, data, opt) {
        const description = this.__STORE__[lang] || {};
        let msg = description[errorCodeNumber + ''];
        let errorCodeDesc = {
            msg: msg,
            data: data,
            code: errorCodeNumber
        };
        if (msg !== undefined) {
            if (typeof msg === 'function') {
                errorCodeDesc.msg = msg(errorCodeDesc.code, errorCodeDesc.data || {}, opt || {}) || '';
            } else if (errorCodeDesc.data && typeof msg === 'string') {
                let MR;
                let preLength = 0;
                let val;
                while ((MR = ErrorCodeUtil.userDataRegExp.exec(errorCodeDesc.msg))) {
                    val = errorCodeDesc.data[MR[3]] || '';
                    msg = `${msg.substring(0, preLength + MR.index)}${val}${
                        errorCodeDesc.msg.substring(ErrorCodeUtil.userDataRegExp.lastIndex)
                    }`;
                    preLength += val.length - MR[0].length;
                }
                errorCodeDesc.msg = msg;
            }
        } else {
            errorCodeDesc = null;
        }
        return errorCodeDesc;
    }

    /**
     * 1. 根据不同的类型，返回不同的消息（ error 消息 ）
     * @param {Object|String} errorObj
     * @param {Object|String} [langObj]
     * @param {Object} [opt]
     * @returns {{
     *   msg: String|undefined,
     *   data: Object|undefined,
     *   code: Number|String
     * }|null}
     */
    getErrorCodeDesc (errorObj, langObj, opt) {
        const lang = this.localManage.getLangStr(langObj);
        let errorCodeNumber = 0;
        let errorCodeDesc;
        if (typeof errorObj === 'string' || typeof errorObj === 'number') {
            errorCodeNumber = errorObj;
            errorCodeDesc = this._getTranslatedErrorCodeDescription(lang, errorCodeNumber, null, opt);
        } else if (errorObj instanceof Error) {
            errorCodeDesc = this._getTranslatedErrorCodeDescription(lang, 'rest-error', null, opt);
        } else if (
            errorObj &&
            typeof errorObj === 'object' &&
            (errorCodeNumber = errorObj.errorCode || errorObj.error_code)
        ) {
            errorCodeDesc = this._getTranslatedErrorCodeDescription(
                lang, errorCodeNumber = (parseInt(errorCodeNumber) || errorCodeNumber), errorObj.data, opt
            );
            if (!errorCodeDesc) {
                errorCodeDesc = {
                    msg: this.__STORE__[lang]['error-code-not-found'],
                    code: 'error-code-not-found'
                };
                console.warn('errorCode: "' + errorCodeNumber + '", 在应用端找不到对应的描述，请尽快更新!!!');
            }
        }
        return errorCodeDesc || this._getTranslatedErrorCodeDescription(lang, 'default-error', null, opt);
    }

    /**
     * 2. 记录出错信息
     * @param {Object} logger
     * @param {String} url
     * @param {String} type
     * @param {Error|String} [errorObj]
     * @param {{
     *   username: String,
     *   ip: String,
     *   method: String,
     *   params: Object
     * }} urlLogOpt
     * @param {IncomingMessage} restResponse -- DataServerResponse
     */
    loggerUrlErrorMsg (logger, url, type, errorObj, urlLogOpt, restResponse) {
        const errorCode = (errorObj && typeof errorObj === 'object')
            ? (errorObj.error_code || errorObj.errorCode)
            : '';
        const logParam = urlLogOpt.params && typeof (urlLogOpt.params) === 'object' && !Array.isArray(urlLogOpt.params);
        let pattern = `用户（%s）在访问URL："%s" 时，%s，\nIP: %s, HttpStatus: %s，${
            logParam ? '\nParams: %s' : ''
        }\nRawMessage: %s`;
        const errorType = type === 'fail' ? '失败了' : '出错啦';
        const statusCode = restResponse && restResponse.statusCode ? restResponse.statusCode : '未知';
        let rawMsg = restResponse && restResponse.raw && restResponse.raw.toString && restResponse.raw.toString()
            ? restResponse.raw.toString()
            : '未知';
        let errorMsg = errorObj
            ? (
                (typeof errorObj !== 'string')
                    ? (
                        errorObj.stack ? errorObj.stack : JSON.stringify(errorObj)
                    )
                    : errorObj
            )
            : '未知';

        const adjustContent = (msg) => {
            return msg.length > 320 ? `${msg.substr(0, 320)} ... [len:${msg.length}]` : msg;
            // 如果 data 超过 80 的长度，则使用 省略号 代替（不太好判断 data 内是一个 json 值的内容，所以这里注释了）
            // return msg.replace(/(['"]data['"]:['"])([^'"]+)(['"])/, (data, key, val, end) => {
            //     if (val.length > 80) { return `${key}...${end}`; } else { return data; }
            // });
        };
        if (errorCode) {
            rawMsg = adjustContent(rawMsg);
            errorMsg = adjustContent(errorMsg);
        }
        const logData = [
            urlLogOpt.username, `[${urlLogOpt.method.toUpperCase()}]${url}`, errorType, urlLogOpt.ip, statusCode
        ];
        if (logParam) {
            let params = '';
            Object.keys(urlLogOpt.params).forEach((key) => {
                params += '(' + key + '=' + urlLogOpt.params[key] + '), ';
            });
            logData.push(params);
        }
        logData.push(rawMsg);
        if (rawMsg !== errorMsg) {
            pattern += '\nErrorMsg:' + ((typeof errorMsg === 'string') ? '   %s' : '');
            logData.push(errorMsg);
        }
        logger.error(pattern, ...logData);
    }
}

const instances = {};

module.exports = {
    /**
     * 初始化 ErrorCodes 资源管理实例
     * @param {Object} i18nResourceManage -- 国际化资源管理实例
     * @param {{
     *   moduleNameInLocalLang: String,
     *   basedir: String|Array<String>
     * }} config
     * @param {String} [key="default"]    -- ErrorCodes 管理资源 ID
     * @returns {{
     *   getErrorCodeDesc: Function,
     *   loggerUrlErrorMsg: Function
     * }}
     */
    initManage (i18nResourceManage, config, key) {
        const id = (key && typeof key === 'string') ? key : 'default';
        return instances[id] || (instances[id] = new ErrorCodeResourceManage(i18nResourceManage, config));
    },
    /**
     * 获取 ErrorCodes 资源管理实例
     * @param {String} [key="default"] -- ErrorCodes 管理资源 ID
     * @returns {{
     *   getErrorCodeDesc: Function,
     *   loggerUrlErrorMsg: Function
     * }|null}
     */
    getManage (key) {
        return instances[(key && typeof key === 'string') ? key : 'default'];
    }
};
