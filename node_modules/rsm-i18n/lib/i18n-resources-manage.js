/*!
 * Copyright (c) 2010-2021 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2021 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const fs = require('fs');
const crypto = require('crypto');
const path = require('path');
const locale = require('locale');

// 记录本模块的加载时间，方便热加载
locale.__rsm_cache__ = locale.__rsm_cache__ || {};
locale.__rsm_cache__.moduleRequireTime = Date.now();

/**
 * 国际化或本地化语言管理类
 * Created by wuyaoqian on 16/11/16.
 */

const LocalUtil = {
    /**
     * 检测是否是 js 文件的正则表达式
     */
    isJSFileRegExp: /\.js$/i,
    /**
     * 提取 content 的 hash 信息
     * @param {String} content -- 内容字符串
     * @returns {String}
     */
    getContentHash: function (content) {
        return crypto
            .createHash('md5')
            .update(content, 'utf8')
            .digest('hex');
    },
    /**
     * 将烤串转换成驼峰
     * @param {String} name -- 烤串
     * @returns {String}
     */
    getCamelName: function (name) {
        return name.replace(/-([a-z])/g, function (matcher, letter) {
            return letter.toUpperCase();
        });
    },
    /**
     * 根据 formatOption 格式化 name 名称
     * // zh_Cn.v8 => zh-cn.v8，
     * // zh_cN    => zh-cn
     * @param {String} name   -- local name
     * @param {Object} format -- { languageUpperCase, countryUpperCase, separator, extLanguageSeparator }
     * @returns {String}
     */
    normalizeLocal: function (name, formatOption) {
        const ret1 = name.split(formatOption.extLanguageSeparator);
        const ret2 = ret1[0].match(/[a-z]+/gi);
        const lang = ret2[0].toLowerCase();
        const country = ret2[1];
        const ext = ret1[1];
        const normalized = [formatOption.languageUpperCase ? lang.toUpperCase() : lang.toLowerCase()];
        if (country) {
            normalized.push(formatOption.countryUpperCase ? country.toUpperCase() : country.toLowerCase());
        }
        return `${normalized.join(formatOption.separator)}${
            ext ? (formatOption.extLanguageSeparator + ext.toLowerCase()) : ''
        }`;
    }
};

class LocalResourceManage {
    /**
     * Local Resources Manage Constructor
     * @param {{
     *   format: {
     *      languageUpperCase: Boolean,
     *      countryUpperCase: Boolean,
     *      separator: String,
     *      extLanguageSeparator: String
     *   },
     *   alias: {},
     *   customImplGetLocalLangStrByRequest: Function,
     *   basedir: String|Array<String>,
     *   supported: Array<String>
     * }} config
     */
    constructor (config) {
        /**
         * 国际化语言数据存储对象
         */
        this.__STORE__ = {};
        /**
         * Local 格式配置 ( 注意：这只是输出的格式，输入的格式理论上是任意格式都将会被支持 )
         */
        this.format = Object.assign({
            languageUpperCase: false,
            countryUpperCase: false,
            separator: '-',
            extLanguageSeparator: '.'
        }, config.format);
        /**
         * 检测是否有扩展语言的正则表达式，如：zh-cn.v8.js => match[1]: zh-cn.v8, match[2]: zh-cn
         */
        this.specialLocalRegExp = new RegExp(
            '^(([^' + this.format.extLanguageSeparator + ']+)\\' + this.format.extLanguageSeparator +
            '[^' + this.format.extLanguageSeparator + ']+)\\.js$', 'i'
        );
        /**
         * 别名配置 => { alias-name: [ resource-name1, ... ], ... }
         */
        this.alias = config.alias || {};
        /**
         * 自定义提取 local-name 的方法
         * @param {IncomingMessage|String} [request=undefined]
         * @returns {String|undefined}
         */
        this.customGetLangStr = config.customImplGetLocalLangStrByRequest || function () {};
        /**
         * 扫描国际化资源的路径列表
         */
        this.basedir = Array.isArray(config.basedir) ? config.basedir : [config.basedir];
        /**
         * 支持列表（ 包含扩展 ）
         * // [es.v8, en, zh_CN.v8] => [es.v8, en, zh-cn.v8]
         */
        this.supportedArrayWithExt = (config.supported || ['zh-CN']).map((val) => {
            return LocalUtil.normalizeLocal(val, this.format);
        });
        /**
         * 支持列表（ 不含扩展 ）
         * // [es.v8, en, zh-cn.v8] => [es, en, zh-cn]
         */
        this.supportedArrayWithoutExt = this.supportedArrayWithExt.map((val) => {
            return val.replace(new RegExp(
                '\\' + this.format.extLanguageSeparator + '[^' + this.format.extLanguageSeparator + ']+$'
            ), '');
        });
        /**
         * 支持列表（ 不含扩展的 locale.Locales 对象 ）
         */
        this.supported = new locale.Locales(this.supportedArrayWithoutExt, this.supportedArrayWithoutExt[0]);

        // 开始加载资源
        this._loadResource();
    }

    /**
     * 0.1 根据模块路径提取国际化资源
     * @param {String} modulePath -- 模块路径
     * @returns {Object<String,Object>}
     */
    _getModuleI18NResource (modulePath) {
        const self = this;
        return fs.readdirSync(modulePath).reduce((resource, fileName) => {
            if (!LocalUtil.isJSFileRegExp.test(fileName)) { return resource; }
            let lang, langExt, isInSupportedArray, langFileBase, langFileExt;
            const matchResult = fileName.match(self.specialLocalRegExp);
            if (matchResult) {
                lang = LocalUtil.normalizeLocal(matchResult[2], self.format);
                langExt = LocalUtil.normalizeLocal(matchResult[1], self.format);
                langFileBase = path.join(modulePath, matchResult[2] + '.js');
                langFileExt = path.join(modulePath, fileName);
                isInSupportedArray = self.supportedArrayWithExt.includes(langExt);
            } else {
                lang = LocalUtil.normalizeLocal(fileName.replace('.js', ''), self.format);
                langFileBase = path.join(modulePath, fileName);
                isInSupportedArray = self.supportedArrayWithoutExt.includes(lang);
            }
            // 如果不在被支持的列表中，将不加载相应资源了
            if (isInSupportedArray) {
                if (langFileExt) {
                    resource[lang] = Object.assign(require(langFileBase), require(langFileExt));
                } else if (!resource[lang]) {
                    resource[lang] = require(langFileBase);
                }
            }
            return resource;
        }, {});
    }

    /**
     * 0.2 加载国际化语言数据
     */
    _loadResource () {
        const self = this;
        // 扫描每一个资源路径
        self.basedir.forEach(function (dir) {
            fs.readdirSync(dir).forEach(function (moduleName) {
                if (!fs.lstatSync(path.join(dir, moduleName)).isDirectory()) { return; }
                const resource = self._getModuleI18NResource(path.join(dir, moduleName));
                Object.keys(resource).forEach(function (lang) {
                    self.__STORE__[lang] = self.__STORE__[lang] || {};
                    self.__STORE__[lang][moduleName] = self.__STORE__[lang][moduleName] || {};
                    self.__STORE__[lang][moduleName].val = Object.assign(
                        self.__STORE__[lang][moduleName].val || {},
                        resource[lang]
                    );
                });
            });
        });
        // 计算每个模块的 hash 值
        Object.keys(self.__STORE__).forEach(function (lang) {
            Object.keys(self.__STORE__[lang]).forEach(function (moduleName) {
                self.__STORE__[lang][moduleName].hash = LocalUtil.getContentHash(
                    JSON.stringify(self.__STORE__[lang][moduleName].val)
                );
            });
        });
        // 记录数据加载并缓存的时间（ 热加载之用 ）
        self.__loadTime__ = Date.now();
    }

    /**
     * 0.3 检测国际化资源是否需要重新加载
     */
    _checkResource () {
        if (this.__loadTime__ > locale.__rsm_cache__.moduleRequireTime) { return false; }
        this.__STORE__ = {};
        this._loadResource();
        return true;
    }

    /**
     * 1. 重组指定模块的内容值（一般是 _error_code_ 模块）
     * @param {String} name      -- 模块名称
     * @param {Function} handler -- 内容重组函数句柄
     * @return {Object|null}
     */
    reFormLangObj (name, handler) {
        const self = this;
        let ret = null;
        if (!name || !handler || typeof name !== 'string' || typeof handler !== 'function') { return ret; }
        Object.keys(self.__STORE__).forEach(function (lang) {
            let store, obj, val;
            if ((store = self.__STORE__[lang]) && (obj = store[name]) && (val = obj.val)) {
                ret = ret || {};
                self.__STORE__[lang][name].val = handler(val);
                Object.defineProperty(ret, lang, {
                    get: function () {
                        if (self._checkResource()) {
                            self.__STORE__[lang][name].val = handler(val);
                        }
                        return self.__STORE__[lang][name].val;
                    }
                });
            }
        });
        return ret;
    }

    /**
     * 2. 提取语言类型字符串
     * @param {IncomingMessage|String} [request=undefined]
     * @returns {String}
     */
    getLangStr (request) {
        let lang;
        // 0. 参数修正（ 只取数组的第0号元素 ）
        if (request && Array.isArray(request)) {
            request = request[0];
        }
        // 0. 参数兼容（ 不存在、是字符串、没有 headers 属性、没有 headers['accept-language'] 属性）
        if (!request) {
            lang = this.supported.default.code;
        } else if (typeof request === 'string') {
            lang = request;
        } else if (!request.headers || !request.headers['accept-language']) {
            lang = this.supported.default.code;
        }
        // 1. 优先自定义语言选择
        if (!lang) {
            lang = this.customGetLangStr(request) || '';
        }
        // 2. 根据 accept-language 选择；
        return String(new locale.Locales(lang ? [lang] : request.headers['accept-language']).best(this.supported));
    }

    /**
     * 3. 获取语言包
     * @param {IncomingMessage|String} [request=undefined]
     * @param {String|Array<String>} names            -- 模块名称
     * @param {Boolean} isCamelOutputNames            -- 是否使用驼峰格式组合多个模块的语言包（只对模块名称起作用）
     * @param {Boolean} forceNameOutputWhenSingleName -- 在单个模块时，是否强制输出模块名称
     * @return {object}
     */
    getLangObj (request, names, isCamelOutputNames, forceNameOutputWhenSingleName) {
        const tempArray = Array.isArray(names) ? names : [names];
        const lang = this.getLangStr(request);
        let newName;
        let newVal;
        this._checkResource();
        if (!this.__STORE__[lang]) {
            return {};
        }
        let nameArray = [];
        tempArray.forEach((name) => {
            nameArray = nameArray.concat(this.alias[name] || [name]);
        });
        if (nameArray.length === 1) {
            newVal = this.__STORE__[lang][nameArray[0]] ? this.__STORE__[lang][nameArray[0]].val : {};
            if (forceNameOutputWhenSingleName) {
                newName = isCamelOutputNames ? LocalUtil.getCamelName(nameArray[0]) : nameArray[0];
                newVal = { [newName]: newVal };
            }
            return newVal;
        }
        const nameJoinStr = `${nameArray.join(',')}-camel:${isCamelOutputNames}`;
        if (this.__STORE__[lang][nameJoinStr] && this.__STORE__[lang][nameJoinStr].val) {
            return this.__STORE__[lang][nameJoinStr].val;
        }
        newVal = {};
        nameArray.forEach((name) => {
            newName = isCamelOutputNames ? LocalUtil.getCamelName(name) : name;
            newVal[newName] = (this.__STORE__[lang] && this.__STORE__[lang][name])
                ? this.__STORE__[lang][name].val
                : {};
        });
        if (!this.__STORE__[lang][nameJoinStr]) {
            this.__STORE__[lang][nameJoinStr] = {};
        }
        return (this.__STORE__[lang][nameJoinStr].val = newVal);
    }

    /**
     * 4. 获取语言包的 hash 值
     * @param {IncomingMessage|String} [request=undefined]
     * @param {String|Array<String>} names -- 模块名称
     * @param {Boolean} isCamelOutputNames -- 是否使用驼峰格式组合多个模块的语言包（只对模块名称起作用）
     * @param {Integer} hashLength         -- hash 值的长度
     * @return {object} {val, hash}
     */
    getLangHash (request, names, isCamelOutputNames, hashLength) {
        const tempArray = Array.isArray(names) ? names : [names];
        const lang = this.getLangStr(request);
        const len = Number.isInteger(hashLength) ? hashLength : 32;
        this._checkResource();
        if (!this.__STORE__[lang]) {
            return '';
        }
        let nameArray = [];
        tempArray.forEach((name) => {
            nameArray = nameArray.concat(this.alias[name] || [name]);
        });
        if (nameArray.length === 1) {
            return (
                this.__STORE__[lang][nameArray[0]] ? this.__STORE__[lang][nameArray[0]].hash : '' || ''
            ).substr(0, len);
        }
        const nameJoinStr = `${nameArray.join(',')}-camel:${isCamelOutputNames}`;
        if (this.__STORE__[lang][nameJoinStr] && this.__STORE__[lang][nameJoinStr].hash) {
            return (this.__STORE__[lang][nameJoinStr].hash || '').substr(0, len);
        }
        if (!this.__STORE__[lang][nameJoinStr]) {
            this.__STORE__[lang][nameJoinStr] = {};
        }
        return (this.__STORE__[lang][nameJoinStr].hash = LocalUtil.getContentHash(
            JSON.stringify(this.getLangObj(request, nameArray, isCamelOutputNames))
        ) || '').substr(0, len);
    }

    /**
     * 5. 判断指定模块的语言是否存在
     * @param {Object|String} request -- 语言名称
     * @param {String} name           -- 模块名称
     * @return {Boolean}
     */
    isExist (request, name) {
        const lang = this.getLangStr(request);
        this._checkResource();
        return !!((this.__STORE__[lang] && this.__STORE__[lang][name]) || this.alias[name]);
    }

    /**
     * 6. 获取当前系统所支持的语言列表
     * @param {Boolean} withExt -- 是否包含扩展语言
     * @return {Array<String>}
     */
    getSupportedList (withExt) {
        return withExt ? this.supportedArrayWithExt : this.supportedArrayWithoutExt;
    }

    /**
     * 7. 格式化 name 名称
     * @param {String} name
     */
    normalize (name) {
        return LocalUtil.normalizeLocal(name, this.format);
    }
}

const instances = {};

module.exports = {
    /**
     * 获取国际化资源管理实例
     * @param {Object} config          -- 资源配置
     * @param {String} [key="default"] -- 国际化管理资源 ID
     * @returns {{
     *    reFormLangObj: Function,
     *    getLangStr: Function,
     *    getLangObj: Function,
     *    getLangHash: Function,
     *    isExist: Function,
     *    getSupportedList: Function,
     *    normalize: Function
     * }}
    */
    initManage (config, key) {
        const id = (key && typeof key === 'string') ? key : 'default';
        return instances[id] || (instances[id] = new LocalResourceManage(config));
    },
    /**
     * 获取国际化资源管理实例
     * @param {String} [key="default"] -- 国际化管理资源 ID
     * @returns {{
     *    reFormLangObj: Function,
     *    getLangStr: Function,
     *    getLangObj: Function,
     *    getLangHash: Function,
     *    isExist: Function,
     *    getSupportedList: Function,
     *    normalize: Function
     * }|undefined}
     */
    getManage (key) {
        return instances[(key && typeof key === 'string') ? key : 'default'];
    }
};
