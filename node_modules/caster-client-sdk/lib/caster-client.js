/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

"use strict";

/**
 * 包装 HazelcastClient, 并只对外提供一个 getMap 方法
 * Created by wuyaoqian on 16/3/29.
 */

var path = require("path");
var EventEmitter = require("events");
var HazelcastClientIndex = require("hazelcast-client");
var Address = HazelcastClientIndex.Address;
var logger = require("log4js-config").get("eefung.webapp.caster-client." + path.basename(__filename));
var clientLogger = new (require("../util/custom-logger.js"))(logger);
var config = require("config").system;

var instance;
var deepExtend = function (source, target) {
    if (target === null || typeof target !== 'object') { return source;}

    var keys = Object.keys(target);
    var i = keys.length, temp;
    while (i--) {
        temp = target[keys[i]];
        if (!Array.isArray(temp) && typeof temp === 'object') {
            source[keys[i]] = deepExtend(source[keys[i]], temp);
        } else {
            source[keys[i]] = temp;
        }
    }
    return source;
};
var transformAddress = function (configAddressArray) {
    var retArray = [];
    if (Array.isArray(configAddressArray) && configAddressArray.length) {
        configAddressArray.forEach(function (address) {
            retArray.push(new Address(address.host, address.port));
        });
    }
    return retArray;
};

// 加载重载方法
(require("../util/custom-overwrite.js")).on('reconnect', function (rawClient) {
    instance.rawClient = rawClient;
    instance && instance.emit("reconnect", rawClient);
});

var CasterClient = function () {
    var self = this, tempOpt = config.caster || {};
    if (!tempOpt.networkConfig) {
        tempOpt.networkConfig = {};
    }
    if (!tempOpt.properties) {
        tempOpt.properties = {}
    }
    tempOpt.networkConfig.addresses = transformAddress(tempOpt.networkConfig.addresses);
    self.options = deepExtend(new HazelcastClientIndex.Config.ClientConfig(), tempOpt);
    self.rawClient = null;
    if (!self.options.properties['hazelcast.logging']) {
        self.options.properties['hazelcast.logging'] = clientLogger;
    }

    var BackOff = require('backo2');
    var retryTimeOutBackOff = new BackOff({
        min: 1000 * 60,
        max: 1000 * 60 * 1.5,
        factor: 1.5,
        jitter: 0
    });
    var retryErrorBackOff = new BackOff({
        min: 1000,
        max: 1000 * 60,
        factor: 1.5,
        jitter: 0
    });
    var nextTimeOutId, nextTimeOutDuration;
    var executeRetry = function (type, error, tempClient, executeTimeOutDuration) {
        if (self.rawClient) { return; }
        if (tempClient.isDead) {
            return (type === 'timeout' ? retryTimeOutBackOff : retryErrorBackOff).attempts -= 1;
        }
        logger.warn(
            '连接 caster %s, 稍后（%ss）自动尝试 -> 次数（%s）, Detail: \n',
            (type === 'timeout' ? '超时' : '失败'),
            executeTimeOutDuration / 1000,
            retryErrorBackOff.attempts + retryTimeOutBackOff.attempts,
            (error && error.stack) ? error.stack : error
        );
        tempClient.shutdown();
        tempClient.isDead = true;
        setTimeout(function () {
            retryFN(new HazelcastClientIndex.Client(self.options));
        }, executeTimeOutDuration);
    }, retryFN = function (tempClient) {
        logger.info("initialing caster");
        nextTimeOutDuration = retryTimeOutBackOff.duration();
        retryTimeOutBackOff.attempts -= 1;
        tempClient.init().then(function (client) {
            logger.info("success connect caster.");
            clearTimeout(nextTimeOutId);
            retryErrorBackOff.reset();
            retryTimeOutBackOff.reset();
            self.rawClient = client;
            self.emit('success', client);
        }).catch(function (error) {
            clearTimeout(nextTimeOutId);
            executeRetry('error', error, tempClient, retryErrorBackOff.duration());
        });
        nextTimeOutId = setTimeout(function () {
            retryTimeOutBackOff.attempts += 1;
            executeRetry('timeout', new Error('HazelcastClient init no response in ' + (nextTimeOutDuration / 1000) + ' second'), tempClient, 1000);
        }, nextTimeOutDuration);
    };

    retryFN(new HazelcastClientIndex.Client(self.options));
};
CasterClient.prototype = Object.create(EventEmitter.prototype);

module.exports = {
    /**
     * 获取 client 实例
     * @returns {Promise} {
     *      resolve: function(instance){}
     * }
     */
    getInstance: function () {
        return new Promise(function (resolve) {
            if (!instance) {
                instance = new CasterClient();
            }
            if (instance.rawClient) {
                process.nextTick(function () {
                    resolve(instance);
                });
            } else {
                instance.on('success', function () {
                    resolve(instance);
                });
            }
        });
    }
};