/**
 * Created by wuyaoqian on 14-3-18.
 */

require("log4js-config").init(function () {
    return require("./config/app-logging.js");
});

const DataSdkSocket = require("../index.js");
const PushServer = DataSdkSocket.pushServer;

const mockObj = {
    // 模拟的一个假 ClientSocket
    clientSocket: {
        id: '/event#xxx-xxx-xxx-xxx',
        nsp: {
            name: '/event',
            connected: {}
        },
        request: {
            _BASE_REST_INFO_: {
                "sid": '111-222-333-444',
                "session-store": {
                    get (sid, fn) {
                        fn(null, {
                            "_USER_TOKEN_": {
                                access_token: "test-access-token",
                                refresh_token: "test-refresh-token",
                                expires_in: 3000,
                                expires_at: Date.now() + (3000 * 1000)
                            }
                        })
                    }
                },
                "userid": 'test-user-id',
                "username": 'test-user-name',
                "lang": 'zh-CN'
            }
        }
    },
    // 模拟的一个假 ping 指令
    pingInstruct: {
        type: "ping",
        instructTime: Date.now(),
        instruct: {
            eventId: 'xxx',
            eventHash: 'yyy',
            lastDataTime: Date.now()
        }
    },
    // 模拟的一个假 stop 指令
    stopInstruct: {
        type: "stop",
        instruct: {
            eventId: 'xxx'
        }
    }
};
mockObj.clientSocket.nsp.connected[mockObj.clientSocket.id] = mockObj.clientSocket;

// 监听全局 token 相关事件；
PushServer.events.on("token-refreshed", function (clientSocket, newToken) {
    console.log('token-refreshed（socketid:%s）, newToken: ', clientSocket.id, newToken);
}).on("token-refresh-expired", function (clientSocket) {
    console.log('token-refresh-expired（socketid:%s）', clientSocket.id);
}).on("token-not-exist", function (clientSocket) {
    console.log('token-not-exist（socketid:%s）', clientSocket.id);
}).on("token-was-kicked", function (clientSocket) {
    console.log('token-was-kicked（socketid:%s）', clientSocket.id);
}).on("token-force-out", function (clientSocket, errorCodeNumber) {
    console.log('token-force-out（socketid:%s, errorCodeNumber:%s）', clientSocket.id, errorCodeNumber);
});

// 获取一个推送实例
const instance = PushServer.getInstance("/event", {
    type: 'coordinator',
    config: {
        aid: 'PUSHSERVICE',
        host: '172.19.103.39',
        port: 8080,
        backOff: {
            maxAttempts: 10
        }
    }
});

// 监听正常数据
instance.on("event-data", function (socket, data) {
    // console.log("receive event-data: ", data);
});
// 监听异常数据
instance.on("event-error", function (socket, data) {
    console.log("receive event-error: ", data);
});

// 周期发送 ping, stop 指令
let times = 0;
const intervalPing = function () {
    instance.userEmit(mockObj.clientSocket, "event-instruct", mockObj.pingInstruct, () => {
        // console.log("interval ping ack response.");
    });
    if (3 === times++) {
        setTimeout(() => {
            times = 0;
            instance.userEmit(mockObj.clientSocket, "event-instruct", mockObj.stopInstruct, () => {
                // console.log("stop ack response.");
            })
        }, 5000);
    }
};
intervalPing();
setInterval(intervalPing, 1000 * 30);

// 临时启动一个服务
const http = require("http");
http.createServer(function (request, response) {
    response.writeHead(200, {"Content-Type": "text/plain"});
    response.write("Hello World");
    response.end();
}).listen(process.env.port || 8801);

//console.log(require("path").join("http://push.antfact.com"));

