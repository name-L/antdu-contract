/*!
 * Copyright (c) 2010-2018 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2018 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

const $Script = require('scriptjs');
const ThemeResource = require("./theme-resource.js");

/**
 * theme-manage.js
 * 使用方法：
 * import ThemeManage from "@component-util/theme-manage";
 *
 * ThemeManage.add(theme, trunkData, entryKey);
 * ThemeManage.add.setJsThemeCallBackHandler(handler);
 * ThemeManage.regist(theme, trunkUrl, entryKey);
 * ThemeManage.change(theme, cb);
 *
 * Created by wuyaoqian on 2018/11/16.
 */

let _JsThemeCallBack_;
const _EntryResourceDataCache_ = {};
const _EntryResourceUrlCache_ = {};
const ThemeManage = {
    /**
     * 添加皮肤资源
     * @param {string} theme - 皮肤名称
     * @param {(object|function)[]} trunkResource - 皮肤资源列表
     * @param     {function} trunkResource[].use - object 类型时需提供的 use 方法
     * @param     {function} trunkResource[].unuse - object 类型时需提供的 unuse 方法
     * @param {string} entryKey - 皮肤资源列表所在模块
     */
    add (theme, trunkResource, entryKey) {
        let key = entryKey || 'none';
        _EntryResourceDataCache_[theme] = _EntryResourceDataCache_[theme] || {};
        _EntryResourceUrlCache_[theme] = _EntryResourceUrlCache_[theme] || {};
        if (_EntryResourceDataCache_[theme][key]) {
            console.warn('The key (%s) of theme (%s) resource already exist!', key, theme);
            return ThemeManage;
        }
        ((_EntryResourceDataCache_[theme][key] = trunkResource) || []).forEach((resource) => {
            if (!resource) { return; }
            let cs = null;
            let js = null;
            if (typeof resource.use === 'function' && typeof resource.unuse === 'function') {
                cs = resource;
            } else {
                js = resource.__esModule ? resource.default : resource;
                js.cb = _JsThemeCallBack_ || function () { _JsThemeCallBack_ && _JsThemeCallBack_.call(this, ...arguments); };
            }
            ThemeResource.regist({[theme]: [cs, js]}, key);
        });
        _EntryResourceUrlCache_[theme][key] = null;
        return ThemeManage;
    },
    /**
     * 注册皮肤资源
     * @param {string} theme - 皮肤名称
     * @param {string} trunkUrl - 皮肤资源列表所在地的URL
     * @param {string} entryKey - 皮肤资源列表所在模块
     */
    regist (theme, trunkUrl, entryKey) {
        let key = entryKey || 'none';
        _EntryResourceDataCache_[theme] = _EntryResourceDataCache_[theme] || {};
        _EntryResourceUrlCache_[theme] = _EntryResourceUrlCache_[theme] || {};
        if (!_EntryResourceUrlCache_[theme][key]) {
            _EntryResourceUrlCache_[theme][key] = trunkUrl || '';
        } else {
            console.warn('The key (%s) of theme (%s) resource url already exist!', key, theme);
        }
        return ThemeManage;
    },
    /**
     * 切换皮肤（两步：【1】下载皮肤资源，【2】内存中应用皮肤资源）
     * @param {string} theme - 皮肤名称
     * @param {function|undefined} cb 切换皮肤后的回调
     */
    change (theme, cb) {
        _EntryResourceDataCache_[theme] = _EntryResourceDataCache_[theme] || {};
        _EntryResourceUrlCache_[theme] = _EntryResourceUrlCache_[theme] || {};
        let finish = function () {
            return typeof cb === 'function' ? cb(ThemeResource.change(theme)) : ThemeResource.change(theme);
        };
        let keys = Object.keys(_EntryResourceUrlCache_[theme]);
        let len = keys.length;
        let count = 0;
        keys.forEach((key) => {
            // 已存在，直接跳过
            if (_EntryResourceDataCache_[theme][key]) {
                if (len <= ++count) { finish(); }
                return;
            }
            // 排除无效
            if (!_EntryResourceUrlCache_[theme][key]) {
                if (len <= ++count) { finish(); }
                return;
            }
            // 不存在，异步下载（ 需要异步 js 中调用 ThemeManage.add(theme, trunkResource, entryKey), 之后下次将不在需要异步下载 ）
            $Script(_EntryResourceUrlCache_[theme][key], () => {
                if (len <= ++count) { finish(); }
            });
        });
        return ThemeManage;
    }
};

/**
 * 设置JS皮肤执行后的回调句柄
 * @param handler
 */
ThemeManage.add.setJsThemeCallBackHandler = function (handler) {
    if (handler && typeof handler === 'function') { _JsThemeCallBack_ = handler; }
};

module.exports = ThemeManage;
