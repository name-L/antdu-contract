/*!
 * Copyright (c) 2010-2020 EEFUNG Software Co.Ltd. All rights reserved.
 * 版权所有 (c) 2010-2020 湖南蚁坊软件股份有限公司。保留所有权利。
 */

'use strict';

/**
 * Session 相关辅助类
 * Created by wuyaoqian on 16/9/20.
 */

const path = require('path');
const casterClientSDK = require('caster-client-sdk');
const DataSdkRest = require('data-sdk-rest');
const dataManage = DataSdkRest.userDataManage;
const baseRestler = DataSdkRest.baseRestler;
const userConfig = require('config').user;
const EventEmitter = require('events');
const IpUtil = require('./ip-util');
const logger = require('log4js-config').get('eefung.data-sdk-util.' + path.basename(__filename));

let instance = null;
const processFN = {
    /**
     * 调用 auth2 的退出方法
     * @param locker
     * @param lockType
     * @param onlyExitCurrent
     * @param sid
     * @param session
     * @param token
     * @param user
     */
    logout: function (locker, lockType, onlyExitCurrent, sid, session, token, user) {
        baseRestler.get(userConfig.logoutUrl, {
            req: null,
            res: null,
            headers: {
                'Authorization': 'oauth2 ' + token.access_token
            },
            query: {
                only_exit_current: onlyExitCurrent
            }
        }).on('success', function () {
            // locker.forceUnlock().then(function () {
            //     locker.destroy();
            // });
            logger.info(
                'session(sid: %s, user: %s) was %s, then trigger logout events success.',
                sid, user.username, lockType
            );
        }).on('error', function () {
            // locker.forceUnlock().then(function () {
            //     locker.destroy();
            // });
            logger.warn(
                'session(sid: %s, user: %s) was %s, but trigger logout events has error.',
                sid, user.username, lockType
            );
        }).on('fail', function () {
            // locker.forceUnlock().then(function () {
            //     locker.destroy();
            // });
            logger.warn(
                'session(sid: %s, user: %s) was %s, but trigger logout events was failed.',
                sid, user.username, lockType
            );
        });
    },
    /**
     * 退出前 上一把 "锁"
     * @param sid
     * @param session
     * @param lockType
     * @param onlyExitCurrent
     * @param callback
     */
    lock: function (sid, session, lockType, onlyExitCurrent, callback) {
        let locker;
        let token = dataManage.session.userToken.get(session);
        let user = dataManage.session.userInfo.get(session);
        if (!token || !user) { return; }

        locker = instance.rawClient.getLock(sid);
        // 保持锁一段时间不释放，过了指定时间后自动释放（否则有可能当前 node [获取到lock -> 然后退出 -> 释放lock] ，之后其它 node 才去 tryLock 带来的问题）
        locker.tryLock(0, 1000 * 12).then(function (acquired) {
            if (acquired) {
                if (typeof callback === 'function') {
                    callback.call(this, lockType, sid, token, user);
                }
                processFN.logout(locker, lockType, onlyExitCurrent, sid, session, token, user);
            }
        });
    }
};

module.exports = {
    /**
     * 开始监听 Session 的过期或被删除事件
     * @param sessionMapName {string}
     * @param opt {object}
     * 默认值为：
     * {
     *      evicted: 'yes',
            removed: 'yes'
     * }
     * 注意：为了兼容原来的 onlyEvicted，当 opt === true 时，opt 相当于 {removed:false}
     * @param beforeLogoutCallback {function}
     */
    startWatchSessionExpire: function (sessionMapName, opt, beforeLogoutCallback) {
        if (instance) { return; }

        let options = Object.assign({
            evicted: 'yes',
            removed: 'yes'
        }, opt === true ? {
            removed: false
        } : opt);

        // 监听器
        const listener = function () {
            let listenerObj = {};
            if (options.evicted === 'yes' || options.evicted === 'no') {
                // 自动过期后的回调
                listenerObj.evicted = function (key, value) {
                    processFN.lock.call(
                        this, key, value ? value.data : null, 'evicted', options.evicted, beforeLogoutCallback
                    );
                };
            }
            if (options.removed === 'yes' || options.removed === 'no') {
                // 被删除后的回调
                listenerObj.removed = function (key, value) {
                    processFN.lock.call(
                        this, key, value ? value.data : null, 'removed', options.removed, beforeLogoutCallback
                    );
                };
            }
            this.addEntryListener(listenerObj, undefined, true);
        };

        casterClientSDK.mapManage.getInstance(sessionMapName).then(function (obj) {
            instance = obj;
            listener.call(instance);
        });
    },

    /**
     * 主动退出
     * @param req
     * @param res
     * @param query {object} 默认值：{only_exit_current:'no'}
     * @return {Distribute}
     */
    logout: function (req, res, query) {
        let eventEmitter = new EventEmitter();
        let token = dataManage.session.userToken.get(req.session) || {};
        let user = dataManage.session.userInfo.get(req.session) || {};
        baseRestler.get(userConfig.logoutUrl, {
            req: req,
            res: res,
            headers: {
                'Authorization': 'oauth2 ' + token.access_token
            },
            query: Object.assign({
                only_exit_current: 'no'
            }, query)
        }).on('success', function () {
            logger.info(
                'user (%s) request logout from ip (%s) was successful.',
                user.username || '-',
                IpUtil.getClientIp(req) || 'unknown-ip'
            );
            eventEmitter.emit('success');
        }).on('error', function () {
            logger.warn(
                'user (%s) request logout from ip (%s) was error.',
                user.username || '-',
                IpUtil.getClientIp(req) || 'unknown-ip'
            );
            eventEmitter.emit('error');
        }).on('fail', function () {
            logger.warn(
                'user (%s) request logout from ip (%s) was fail.',
                user.username || '-',
                IpUtil.getClientIp(req) || 'unknown-ip'
            );
            eventEmitter.emit('error');
        });
        return eventEmitter;
    }
};
